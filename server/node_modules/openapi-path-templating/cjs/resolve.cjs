"use strict";

exports.__esModule = true;
exports.encodePathComponent = exports.default = void 0;
var _index = _interopRequireDefault(require("./parse/index.cjs"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const isEncoded = component => {
  try {
    return typeof component === 'string' && decodeURIComponent(component) !== component;
  } catch (e) {
    return false;
  }
};
const encodePathComponent = component => {
  if (isEncoded(component)) {
    return component;
  }
  return encodeURIComponent(component);
};
exports.encodePathComponent = encodePathComponent;
const significantTypes = ['slash', 'path-literal', 'query-marker', 'query-literal', 'template-expression-param-name'];
const resolve = (pathTemplate, parameters = {}, options = {}) => {
  const defaultOptions = {
    encoder: encodePathComponent
  };
  const mergedOptions = {
    ...defaultOptions,
    ...options
  };
  const parseResult = (0, _index.default)(pathTemplate);
  if (!parseResult.result.success) return pathTemplate;
  const parts = [];
  parseResult.ast.translate(parts);
  const resolvedParts = parts.filter(([type]) => significantTypes.includes(type)).map(([type, value]) => {
    if (type === 'template-expression-param-name') {
      return Object.hasOwn(parameters, value) ? mergedOptions.encoder(parameters[value]) : `{${value}}`;
    }
    return value;
  });
  return resolvedParts.join('');
};
var _default = exports.default = resolve;