import { type PluginOptions, type PluginResult } from '@zenstackhq/sdk';
import { Model } from '@zenstackhq/sdk/ast';
import type { DMMF } from '@zenstackhq/sdk/prisma';
import type { OpenAPIV3_1 as OAPI } from 'openapi-types';
export declare abstract class OpenAPIGeneratorBase {
    protected model: Model;
    protected options: PluginOptions;
    protected dmmf: DMMF.Document;
    protected readonly DEFAULT_SPEC_VERSION = "3.1.0";
    constructor(model: Model, options: PluginOptions, dmmf: DMMF.Document);
    abstract generate(): PluginResult;
    protected get includedModels(): import("@zenstackhq/sdk/ast").DataModel[];
    protected wrapArray(schema: OAPI.ReferenceObject | OAPI.SchemaObject, isArray: boolean): OAPI.ReferenceObject | OAPI.SchemaObject;
    protected wrapNullable(schema: OAPI.ReferenceObject | OAPI.SchemaObject, isNullable: boolean): OAPI.ReferenceObject | OAPI.SchemaObject;
    protected array(itemType: OAPI.SchemaObject | OAPI.ReferenceObject): {
        readonly type: "array";
        readonly items: OAPI.ReferenceObject | OAPI.SchemaObject;
    };
    protected oneOf(...schemas: (OAPI.SchemaObject | OAPI.ReferenceObject)[]): {
        oneOf: (OAPI.ReferenceObject | OAPI.SchemaObject)[];
    };
    protected allOf(...schemas: (OAPI.SchemaObject | OAPI.ReferenceObject)[]): {
        allOf: (OAPI.ReferenceObject | OAPI.SchemaObject)[];
    };
    protected getOption<T = string>(name: string): T | undefined;
    protected getOption<T = string, D extends T = T>(name: string, defaultValue: D): T;
    protected generateSecuritySchemes(): Record<string, {
        type: "http";
        scheme: "basic";
    } | {
        type: "http";
        scheme: "bearer";
        bearerFormat?: string | undefined;
    } | {
        type: "apiKey";
        in: "header" | "query" | "cookie";
        name: string;
    } | {
        description: string;
        type: "oauth2";
        flows: {
            authorizationCode: {
                authorizationUrl: string;
                tokenUrl: string;
                refreshUrl: string;
                scopes: Record<string, string>;
            };
            implicit: {
                authorizationUrl: string;
                refreshUrl: string;
                scopes: Record<string, string>;
            };
            password: {
                tokenUrl: string;
                refreshUrl: string;
                scopes: Record<string, string>;
            };
            clientCredentials: {
                tokenUrl: string;
                refreshUrl: string;
                scopes: Record<string, string>;
            };
        };
    }> | undefined;
    protected pruneComponents(paths: OAPI.PathsObject, components: OAPI.ComponentsObject): void;
    private collectUsedComponents;
}
