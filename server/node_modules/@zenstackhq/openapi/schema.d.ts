import z from 'zod';
/**
 * Zod schema for OpenAPI security schemes: https://swagger.io/docs/specification/authentication/
 */
export declare const SecuritySchemesSchema: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"http">;
    scheme: z.ZodLiteral<"basic">;
}, "strip", z.ZodTypeAny, {
    type: "http";
    scheme: "basic";
}, {
    type: "http";
    scheme: "basic";
}>, z.ZodObject<{
    type: z.ZodLiteral<"http">;
    scheme: z.ZodLiteral<"bearer">;
    bearerFormat: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "http";
    scheme: "bearer";
    bearerFormat?: string | undefined;
}, {
    type: "http";
    scheme: "bearer";
    bearerFormat?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"apiKey">;
    in: z.ZodUnion<[z.ZodLiteral<"header">, z.ZodLiteral<"query">, z.ZodLiteral<"cookie">]>;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "apiKey";
    in: "header" | "query" | "cookie";
    name: string;
}, {
    type: "apiKey";
    in: "header" | "query" | "cookie";
    name: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"oauth2">;
    description: z.ZodString;
    flows: z.ZodObject<{
        authorizationCode: z.ZodObject<{
            authorizationUrl: z.ZodString;
            tokenUrl: z.ZodString;
            refreshUrl: z.ZodString;
            scopes: z.ZodRecord<z.ZodString, z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            authorizationUrl: string;
            tokenUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        }, {
            authorizationUrl: string;
            tokenUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        }>;
        implicit: z.ZodObject<{
            authorizationUrl: z.ZodString;
            refreshUrl: z.ZodString;
            scopes: z.ZodRecord<z.ZodString, z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            authorizationUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        }, {
            authorizationUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        }>;
        password: z.ZodObject<{
            tokenUrl: z.ZodString;
            refreshUrl: z.ZodString;
            scopes: z.ZodRecord<z.ZodString, z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            tokenUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        }, {
            tokenUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        }>;
        clientCredentials: z.ZodObject<{
            tokenUrl: z.ZodString;
            refreshUrl: z.ZodString;
            scopes: z.ZodRecord<z.ZodString, z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            tokenUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        }, {
            tokenUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        }>;
    }, "strip", z.ZodTypeAny, {
        authorizationCode: {
            authorizationUrl: string;
            tokenUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        };
        implicit: {
            authorizationUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        };
        password: {
            tokenUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        };
        clientCredentials: {
            tokenUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        };
    }, {
        authorizationCode: {
            authorizationUrl: string;
            tokenUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        };
        implicit: {
            authorizationUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        };
        password: {
            tokenUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        };
        clientCredentials: {
            tokenUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    description: string;
    type: "oauth2";
    flows: {
        authorizationCode: {
            authorizationUrl: string;
            tokenUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        };
        implicit: {
            authorizationUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        };
        password: {
            tokenUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        };
        clientCredentials: {
            tokenUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        };
    };
}, {
    description: string;
    type: "oauth2";
    flows: {
        authorizationCode: {
            authorizationUrl: string;
            tokenUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        };
        implicit: {
            authorizationUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        };
        password: {
            tokenUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        };
        clientCredentials: {
            tokenUrl: string;
            refreshUrl: string;
            scopes: Record<string, string>;
        };
    };
}>]>>;
