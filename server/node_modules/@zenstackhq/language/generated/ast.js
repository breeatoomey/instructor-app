"use strict";
/******************************************************************************
 * This file was generated by langium-cli 1.3.1.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDataModelFieldAttribute = exports.DataModelFieldAttribute = exports.isDataModelField = exports.DataModelField = exports.isDataModelAttribute = exports.DataModelAttribute = exports.isDataModel = exports.DataModel = exports.isConfigInvocationExpr = exports.ConfigInvocationExpr = exports.isConfigInvocationArg = exports.ConfigInvocationArg = exports.isConfigField = exports.ConfigField = exports.isConfigArrayExpr = exports.ConfigArrayExpr = exports.isBooleanLiteral = exports.BooleanLiteral = exports.isBinaryExpr = exports.BinaryExpr = exports.isAttributeParamType = exports.AttributeParamType = exports.isAttributeParam = exports.AttributeParam = exports.isAttributeArg = exports.AttributeArg = exports.isAttribute = exports.Attribute = exports.isArrayExpr = exports.ArrayExpr = exports.isArgument = exports.Argument = exports.isTypeDeclaration = exports.TypeDeclaration = exports.isRegularIDWithTypeNames = exports.isRegularID = exports.isReferenceTarget = exports.ReferenceTarget = exports.isLiteralExpr = exports.LiteralExpr = exports.isExpressionType = exports.isExpression = exports.Expression = exports.isConfigExpr = exports.ConfigExpr = exports.isBuiltinType = exports.isBoolean = exports.isAbstractDeclaration = exports.AbstractDeclaration = exports.ZModelTerminals = void 0;
exports.isUnsupportedFieldType = exports.UnsupportedFieldType = exports.isUnaryExpr = exports.UnaryExpr = exports.isThisExpr = exports.ThisExpr = exports.isStringLiteral = exports.StringLiteral = exports.isReferenceExpr = exports.ReferenceExpr = exports.isReferenceArg = exports.ReferenceArg = exports.isPluginField = exports.PluginField = exports.isPlugin = exports.Plugin = exports.isObjectExpr = exports.ObjectExpr = exports.isNumberLiteral = exports.NumberLiteral = exports.isNullExpr = exports.NullExpr = exports.isModelImport = exports.ModelImport = exports.isModel = exports.Model = exports.isMemberAccessExpr = exports.MemberAccessExpr = exports.isInvocationExpr = exports.InvocationExpr = exports.isInternalAttribute = exports.InternalAttribute = exports.isGeneratorDecl = exports.GeneratorDecl = exports.isFunctionParamType = exports.FunctionParamType = exports.isFunctionParam = exports.FunctionParam = exports.isFunctionDecl = exports.FunctionDecl = exports.isFieldInitializer = exports.FieldInitializer = exports.isEnumField = exports.EnumField = exports.isEnum = exports.Enum = exports.isDataSource = exports.DataSource = exports.isDataModelFieldType = exports.DataModelFieldType = void 0;
exports.reflection = exports.ZModelAstReflection = void 0;
const langium_1 = require("langium");
exports.ZModelTerminals = {
    WS: /\s+/,
    INTERNAL_ATTRIBUTE_NAME: /@@@([_a-zA-Z][\w_]*\.)*[_a-zA-Z][\w_]*/,
    MODEL_ATTRIBUTE_NAME: /@@([_a-zA-Z][\w_]*\.)*[_a-zA-Z][\w_]*/,
    FIELD_ATTRIBUTE_NAME: /@([_a-zA-Z][\w_]*\.)*[_a-zA-Z][\w_]*/,
    ID: /[_a-zA-Z][\w_]*/,
    STRING: /"(\\.|[^"\\])*"|'(\\.|[^'\\])*'/,
    NUMBER: /[+-]?[0-9]+(\.[0-9]+)?/,
    TRIPLE_SLASH_COMMENT: /\/\/\/[^\n\r]*/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*/,
};
exports.AbstractDeclaration = 'AbstractDeclaration';
function isAbstractDeclaration(item) {
    return exports.reflection.isInstance(item, exports.AbstractDeclaration);
}
exports.isAbstractDeclaration = isAbstractDeclaration;
function isBoolean(item) {
    return typeof item === 'boolean';
}
exports.isBoolean = isBoolean;
function isBuiltinType(item) {
    return item === 'String' || item === 'Boolean' || item === 'Int' || item === 'BigInt' || item === 'Float' || item === 'Decimal' || item === 'DateTime' || item === 'Json' || item === 'Bytes';
}
exports.isBuiltinType = isBuiltinType;
exports.ConfigExpr = 'ConfigExpr';
function isConfigExpr(item) {
    return exports.reflection.isInstance(item, exports.ConfigExpr);
}
exports.isConfigExpr = isConfigExpr;
exports.Expression = 'Expression';
function isExpression(item) {
    return exports.reflection.isInstance(item, exports.Expression);
}
exports.isExpression = isExpression;
function isExpressionType(item) {
    return item === 'String' || item === 'Int' || item === 'Float' || item === 'Boolean' || item === 'DateTime' || item === 'Null' || item === 'Object' || item === 'Any' || item === 'Unsupported';
}
exports.isExpressionType = isExpressionType;
exports.LiteralExpr = 'LiteralExpr';
function isLiteralExpr(item) {
    return exports.reflection.isInstance(item, exports.LiteralExpr);
}
exports.isLiteralExpr = isLiteralExpr;
exports.ReferenceTarget = 'ReferenceTarget';
function isReferenceTarget(item) {
    return exports.reflection.isInstance(item, exports.ReferenceTarget);
}
exports.isReferenceTarget = isReferenceTarget;
function isRegularID(item) {
    return item === 'model' || item === 'enum' || item === 'attribute' || item === 'datasource' || item === 'plugin' || item === 'abstract' || item === 'in' || item === 'view' || item === 'import' || (typeof item === 'string' && (/[_a-zA-Z][\w_]*/.test(item)));
}
exports.isRegularID = isRegularID;
function isRegularIDWithTypeNames(item) {
    return isRegularID(item) || item === 'String' || item === 'Boolean' || item === 'Int' || item === 'BigInt' || item === 'Float' || item === 'Decimal' || item === 'DateTime' || item === 'Json' || item === 'Bytes' || item === 'Null' || item === 'Object' || item === 'Any' || item === 'Unsupported';
}
exports.isRegularIDWithTypeNames = isRegularIDWithTypeNames;
exports.TypeDeclaration = 'TypeDeclaration';
function isTypeDeclaration(item) {
    return exports.reflection.isInstance(item, exports.TypeDeclaration);
}
exports.isTypeDeclaration = isTypeDeclaration;
exports.Argument = 'Argument';
function isArgument(item) {
    return exports.reflection.isInstance(item, exports.Argument);
}
exports.isArgument = isArgument;
exports.ArrayExpr = 'ArrayExpr';
function isArrayExpr(item) {
    return exports.reflection.isInstance(item, exports.ArrayExpr);
}
exports.isArrayExpr = isArrayExpr;
exports.Attribute = 'Attribute';
function isAttribute(item) {
    return exports.reflection.isInstance(item, exports.Attribute);
}
exports.isAttribute = isAttribute;
exports.AttributeArg = 'AttributeArg';
function isAttributeArg(item) {
    return exports.reflection.isInstance(item, exports.AttributeArg);
}
exports.isAttributeArg = isAttributeArg;
exports.AttributeParam = 'AttributeParam';
function isAttributeParam(item) {
    return exports.reflection.isInstance(item, exports.AttributeParam);
}
exports.isAttributeParam = isAttributeParam;
exports.AttributeParamType = 'AttributeParamType';
function isAttributeParamType(item) {
    return exports.reflection.isInstance(item, exports.AttributeParamType);
}
exports.isAttributeParamType = isAttributeParamType;
exports.BinaryExpr = 'BinaryExpr';
function isBinaryExpr(item) {
    return exports.reflection.isInstance(item, exports.BinaryExpr);
}
exports.isBinaryExpr = isBinaryExpr;
exports.BooleanLiteral = 'BooleanLiteral';
function isBooleanLiteral(item) {
    return exports.reflection.isInstance(item, exports.BooleanLiteral);
}
exports.isBooleanLiteral = isBooleanLiteral;
exports.ConfigArrayExpr = 'ConfigArrayExpr';
function isConfigArrayExpr(item) {
    return exports.reflection.isInstance(item, exports.ConfigArrayExpr);
}
exports.isConfigArrayExpr = isConfigArrayExpr;
exports.ConfigField = 'ConfigField';
function isConfigField(item) {
    return exports.reflection.isInstance(item, exports.ConfigField);
}
exports.isConfigField = isConfigField;
exports.ConfigInvocationArg = 'ConfigInvocationArg';
function isConfigInvocationArg(item) {
    return exports.reflection.isInstance(item, exports.ConfigInvocationArg);
}
exports.isConfigInvocationArg = isConfigInvocationArg;
exports.ConfigInvocationExpr = 'ConfigInvocationExpr';
function isConfigInvocationExpr(item) {
    return exports.reflection.isInstance(item, exports.ConfigInvocationExpr);
}
exports.isConfigInvocationExpr = isConfigInvocationExpr;
exports.DataModel = 'DataModel';
function isDataModel(item) {
    return exports.reflection.isInstance(item, exports.DataModel);
}
exports.isDataModel = isDataModel;
exports.DataModelAttribute = 'DataModelAttribute';
function isDataModelAttribute(item) {
    return exports.reflection.isInstance(item, exports.DataModelAttribute);
}
exports.isDataModelAttribute = isDataModelAttribute;
exports.DataModelField = 'DataModelField';
function isDataModelField(item) {
    return exports.reflection.isInstance(item, exports.DataModelField);
}
exports.isDataModelField = isDataModelField;
exports.DataModelFieldAttribute = 'DataModelFieldAttribute';
function isDataModelFieldAttribute(item) {
    return exports.reflection.isInstance(item, exports.DataModelFieldAttribute);
}
exports.isDataModelFieldAttribute = isDataModelFieldAttribute;
exports.DataModelFieldType = 'DataModelFieldType';
function isDataModelFieldType(item) {
    return exports.reflection.isInstance(item, exports.DataModelFieldType);
}
exports.isDataModelFieldType = isDataModelFieldType;
exports.DataSource = 'DataSource';
function isDataSource(item) {
    return exports.reflection.isInstance(item, exports.DataSource);
}
exports.isDataSource = isDataSource;
exports.Enum = 'Enum';
function isEnum(item) {
    return exports.reflection.isInstance(item, exports.Enum);
}
exports.isEnum = isEnum;
exports.EnumField = 'EnumField';
function isEnumField(item) {
    return exports.reflection.isInstance(item, exports.EnumField);
}
exports.isEnumField = isEnumField;
exports.FieldInitializer = 'FieldInitializer';
function isFieldInitializer(item) {
    return exports.reflection.isInstance(item, exports.FieldInitializer);
}
exports.isFieldInitializer = isFieldInitializer;
exports.FunctionDecl = 'FunctionDecl';
function isFunctionDecl(item) {
    return exports.reflection.isInstance(item, exports.FunctionDecl);
}
exports.isFunctionDecl = isFunctionDecl;
exports.FunctionParam = 'FunctionParam';
function isFunctionParam(item) {
    return exports.reflection.isInstance(item, exports.FunctionParam);
}
exports.isFunctionParam = isFunctionParam;
exports.FunctionParamType = 'FunctionParamType';
function isFunctionParamType(item) {
    return exports.reflection.isInstance(item, exports.FunctionParamType);
}
exports.isFunctionParamType = isFunctionParamType;
exports.GeneratorDecl = 'GeneratorDecl';
function isGeneratorDecl(item) {
    return exports.reflection.isInstance(item, exports.GeneratorDecl);
}
exports.isGeneratorDecl = isGeneratorDecl;
exports.InternalAttribute = 'InternalAttribute';
function isInternalAttribute(item) {
    return exports.reflection.isInstance(item, exports.InternalAttribute);
}
exports.isInternalAttribute = isInternalAttribute;
exports.InvocationExpr = 'InvocationExpr';
function isInvocationExpr(item) {
    return exports.reflection.isInstance(item, exports.InvocationExpr);
}
exports.isInvocationExpr = isInvocationExpr;
exports.MemberAccessExpr = 'MemberAccessExpr';
function isMemberAccessExpr(item) {
    return exports.reflection.isInstance(item, exports.MemberAccessExpr);
}
exports.isMemberAccessExpr = isMemberAccessExpr;
exports.Model = 'Model';
function isModel(item) {
    return exports.reflection.isInstance(item, exports.Model);
}
exports.isModel = isModel;
exports.ModelImport = 'ModelImport';
function isModelImport(item) {
    return exports.reflection.isInstance(item, exports.ModelImport);
}
exports.isModelImport = isModelImport;
exports.NullExpr = 'NullExpr';
function isNullExpr(item) {
    return exports.reflection.isInstance(item, exports.NullExpr);
}
exports.isNullExpr = isNullExpr;
exports.NumberLiteral = 'NumberLiteral';
function isNumberLiteral(item) {
    return exports.reflection.isInstance(item, exports.NumberLiteral);
}
exports.isNumberLiteral = isNumberLiteral;
exports.ObjectExpr = 'ObjectExpr';
function isObjectExpr(item) {
    return exports.reflection.isInstance(item, exports.ObjectExpr);
}
exports.isObjectExpr = isObjectExpr;
exports.Plugin = 'Plugin';
function isPlugin(item) {
    return exports.reflection.isInstance(item, exports.Plugin);
}
exports.isPlugin = isPlugin;
exports.PluginField = 'PluginField';
function isPluginField(item) {
    return exports.reflection.isInstance(item, exports.PluginField);
}
exports.isPluginField = isPluginField;
exports.ReferenceArg = 'ReferenceArg';
function isReferenceArg(item) {
    return exports.reflection.isInstance(item, exports.ReferenceArg);
}
exports.isReferenceArg = isReferenceArg;
exports.ReferenceExpr = 'ReferenceExpr';
function isReferenceExpr(item) {
    return exports.reflection.isInstance(item, exports.ReferenceExpr);
}
exports.isReferenceExpr = isReferenceExpr;
exports.StringLiteral = 'StringLiteral';
function isStringLiteral(item) {
    return exports.reflection.isInstance(item, exports.StringLiteral);
}
exports.isStringLiteral = isStringLiteral;
exports.ThisExpr = 'ThisExpr';
function isThisExpr(item) {
    return exports.reflection.isInstance(item, exports.ThisExpr);
}
exports.isThisExpr = isThisExpr;
exports.UnaryExpr = 'UnaryExpr';
function isUnaryExpr(item) {
    return exports.reflection.isInstance(item, exports.UnaryExpr);
}
exports.isUnaryExpr = isUnaryExpr;
exports.UnsupportedFieldType = 'UnsupportedFieldType';
function isUnsupportedFieldType(item) {
    return exports.reflection.isInstance(item, exports.UnsupportedFieldType);
}
exports.isUnsupportedFieldType = isUnsupportedFieldType;
class ZModelAstReflection extends langium_1.AbstractAstReflection {
    getAllTypes() {
        return ['AbstractDeclaration', 'Argument', 'ArrayExpr', 'Attribute', 'AttributeArg', 'AttributeParam', 'AttributeParamType', 'BinaryExpr', 'BooleanLiteral', 'ConfigArrayExpr', 'ConfigExpr', 'ConfigField', 'ConfigInvocationArg', 'ConfigInvocationExpr', 'DataModel', 'DataModelAttribute', 'DataModelField', 'DataModelFieldAttribute', 'DataModelFieldType', 'DataSource', 'Enum', 'EnumField', 'Expression', 'FieldInitializer', 'FunctionDecl', 'FunctionParam', 'FunctionParamType', 'GeneratorDecl', 'InternalAttribute', 'InvocationExpr', 'LiteralExpr', 'MemberAccessExpr', 'Model', 'ModelImport', 'NullExpr', 'NumberLiteral', 'ObjectExpr', 'Plugin', 'PluginField', 'ReferenceArg', 'ReferenceExpr', 'ReferenceTarget', 'StringLiteral', 'ThisExpr', 'TypeDeclaration', 'UnaryExpr', 'UnsupportedFieldType'];
    }
    computeIsSubtype(subtype, supertype) {
        switch (subtype) {
            case exports.ArrayExpr:
            case exports.BinaryExpr:
            case exports.MemberAccessExpr:
            case exports.NullExpr:
            case exports.ObjectExpr:
            case exports.ReferenceExpr:
            case exports.ThisExpr:
            case exports.UnaryExpr: {
                return this.isSubtype(exports.Expression, supertype);
            }
            case exports.Attribute:
            case exports.DataSource:
            case exports.FunctionDecl:
            case exports.GeneratorDecl:
            case exports.Plugin: {
                return this.isSubtype(exports.AbstractDeclaration, supertype);
            }
            case exports.BooleanLiteral:
            case exports.NumberLiteral:
            case exports.StringLiteral: {
                return this.isSubtype(exports.LiteralExpr, supertype);
            }
            case exports.ConfigArrayExpr: {
                return this.isSubtype(exports.ConfigExpr, supertype);
            }
            case exports.DataModel:
            case exports.Enum: {
                return this.isSubtype(exports.AbstractDeclaration, supertype) || this.isSubtype(exports.TypeDeclaration, supertype);
            }
            case exports.DataModelField:
            case exports.EnumField:
            case exports.FunctionParam: {
                return this.isSubtype(exports.ReferenceTarget, supertype);
            }
            case exports.InvocationExpr:
            case exports.LiteralExpr: {
                return this.isSubtype(exports.ConfigExpr, supertype) || this.isSubtype(exports.Expression, supertype);
            }
            default: {
                return false;
            }
        }
    }
    getReferenceType(refInfo) {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'AttributeParamType:reference':
            case 'DataModelFieldType:reference':
            case 'FunctionParamType:reference': {
                return exports.TypeDeclaration;
            }
            case 'DataModel:superTypes': {
                return exports.DataModel;
            }
            case 'DataModelAttribute:decl':
            case 'DataModelFieldAttribute:decl':
            case 'InternalAttribute:decl': {
                return exports.Attribute;
            }
            case 'InvocationExpr:function': {
                return exports.FunctionDecl;
            }
            case 'MemberAccessExpr:member': {
                return exports.DataModelField;
            }
            case 'ReferenceExpr:target': {
                return exports.ReferenceTarget;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
    getTypeMetaData(type) {
        switch (type) {
            case 'ArrayExpr': {
                return {
                    name: 'ArrayExpr',
                    mandatory: [
                        { name: 'items', type: 'array' }
                    ]
                };
            }
            case 'Attribute': {
                return {
                    name: 'Attribute',
                    mandatory: [
                        { name: 'attributes', type: 'array' },
                        { name: 'comments', type: 'array' },
                        { name: 'params', type: 'array' }
                    ]
                };
            }
            case 'AttributeParam': {
                return {
                    name: 'AttributeParam',
                    mandatory: [
                        { name: 'attributes', type: 'array' },
                        { name: 'comments', type: 'array' },
                        { name: 'default', type: 'boolean' }
                    ]
                };
            }
            case 'AttributeParamType': {
                return {
                    name: 'AttributeParamType',
                    mandatory: [
                        { name: 'array', type: 'boolean' },
                        { name: 'optional', type: 'boolean' }
                    ]
                };
            }
            case 'ConfigArrayExpr': {
                return {
                    name: 'ConfigArrayExpr',
                    mandatory: [
                        { name: 'items', type: 'array' }
                    ]
                };
            }
            case 'ConfigInvocationExpr': {
                return {
                    name: 'ConfigInvocationExpr',
                    mandatory: [
                        { name: 'args', type: 'array' }
                    ]
                };
            }
            case 'DataModel': {
                return {
                    name: 'DataModel',
                    mandatory: [
                        { name: 'attributes', type: 'array' },
                        { name: 'comments', type: 'array' },
                        { name: 'fields', type: 'array' },
                        { name: 'isAbstract', type: 'boolean' },
                        { name: 'isView', type: 'boolean' },
                        { name: 'superTypes', type: 'array' }
                    ]
                };
            }
            case 'DataModelAttribute': {
                return {
                    name: 'DataModelAttribute',
                    mandatory: [
                        { name: 'args', type: 'array' }
                    ]
                };
            }
            case 'DataModelField': {
                return {
                    name: 'DataModelField',
                    mandatory: [
                        { name: 'attributes', type: 'array' },
                        { name: 'comments', type: 'array' }
                    ]
                };
            }
            case 'DataModelFieldAttribute': {
                return {
                    name: 'DataModelFieldAttribute',
                    mandatory: [
                        { name: 'args', type: 'array' }
                    ]
                };
            }
            case 'DataModelFieldType': {
                return {
                    name: 'DataModelFieldType',
                    mandatory: [
                        { name: 'array', type: 'boolean' },
                        { name: 'optional', type: 'boolean' }
                    ]
                };
            }
            case 'DataSource': {
                return {
                    name: 'DataSource',
                    mandatory: [
                        { name: 'fields', type: 'array' }
                    ]
                };
            }
            case 'Enum': {
                return {
                    name: 'Enum',
                    mandatory: [
                        { name: 'attributes', type: 'array' },
                        { name: 'comments', type: 'array' },
                        { name: 'fields', type: 'array' }
                    ]
                };
            }
            case 'EnumField': {
                return {
                    name: 'EnumField',
                    mandatory: [
                        { name: 'attributes', type: 'array' },
                        { name: 'comments', type: 'array' }
                    ]
                };
            }
            case 'FunctionDecl': {
                return {
                    name: 'FunctionDecl',
                    mandatory: [
                        { name: 'attributes', type: 'array' },
                        { name: 'params', type: 'array' }
                    ]
                };
            }
            case 'FunctionParam': {
                return {
                    name: 'FunctionParam',
                    mandatory: [
                        { name: 'optional', type: 'boolean' }
                    ]
                };
            }
            case 'FunctionParamType': {
                return {
                    name: 'FunctionParamType',
                    mandatory: [
                        { name: 'array', type: 'boolean' }
                    ]
                };
            }
            case 'GeneratorDecl': {
                return {
                    name: 'GeneratorDecl',
                    mandatory: [
                        { name: 'fields', type: 'array' }
                    ]
                };
            }
            case 'InternalAttribute': {
                return {
                    name: 'InternalAttribute',
                    mandatory: [
                        { name: 'args', type: 'array' }
                    ]
                };
            }
            case 'InvocationExpr': {
                return {
                    name: 'InvocationExpr',
                    mandatory: [
                        { name: 'args', type: 'array' }
                    ]
                };
            }
            case 'Model': {
                return {
                    name: 'Model',
                    mandatory: [
                        { name: 'declarations', type: 'array' },
                        { name: 'imports', type: 'array' }
                    ]
                };
            }
            case 'ObjectExpr': {
                return {
                    name: 'ObjectExpr',
                    mandatory: [
                        { name: 'fields', type: 'array' }
                    ]
                };
            }
            case 'Plugin': {
                return {
                    name: 'Plugin',
                    mandatory: [
                        { name: 'fields', type: 'array' }
                    ]
                };
            }
            case 'ReferenceExpr': {
                return {
                    name: 'ReferenceExpr',
                    mandatory: [
                        { name: 'args', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}
exports.ZModelAstReflection = ZModelAstReflection;
exports.reflection = new ZModelAstReflection();
//# sourceMappingURL=ast.js.map