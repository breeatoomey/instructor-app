"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZModelCodeGenerator = void 0;
const ast_1 = require("./ast");
const utils_1 = require("./utils");
// a registry of generation handlers marked with @gen
const generationHandlers = new Map();
// generation handler decorator
function gen(name) {
    return function (target, propertyKey, descriptor) {
        if (!generationHandlers.get(name)) {
            generationHandlers.set(name, descriptor);
        }
        return descriptor;
    };
}
/**
 * Generates ZModel source code from AST.
 */
class ZModelCodeGenerator {
    constructor(options) {
        var _a, _b, _c, _d;
        this.options = {
            binaryExprNumberOfSpaces: (_a = options === null || options === void 0 ? void 0 : options.binaryExprNumberOfSpaces) !== null && _a !== void 0 ? _a : 1,
            unaryExprNumberOfSpaces: (_b = options === null || options === void 0 ? void 0 : options.unaryExprNumberOfSpaces) !== null && _b !== void 0 ? _b : 0,
            indent: (_c = options === null || options === void 0 ? void 0 : options.indent) !== null && _c !== void 0 ? _c : 4,
            quote: (_d = options === null || options === void 0 ? void 0 : options.quote) !== null && _d !== void 0 ? _d : 'single',
        };
    }
    /**
     * Generates ZModel source code from AST.
     */
    generate(ast) {
        const handler = generationHandlers.get(ast.$type);
        if (!handler) {
            throw new Error(`No generation handler found for ${ast.$type}`);
        }
        return handler.value.call(this, ast);
    }
    _generateModel(ast) {
        return ast.declarations.map((d) => this.generate(d)).join('\n\n');
    }
    _generateDataSource(ast) {
        return `datasource ${ast.name} {
${ast.fields.map((x) => this.indent + this.generate(x)).join('\n')}
}`;
    }
    _generateEnum(ast) {
        return `enum ${ast.name} {
${ast.fields.map((x) => this.indent + this.generate(x)).join('\n')}
}`;
    }
    _generateEnumField(ast) {
        return `${ast.name}${ast.attributes.length > 0 ? ' ' + ast.attributes.map((x) => this.generate(x)).join(' ') : ''}`;
    }
    _generateGenerator(ast) {
        return `generator ${ast.name} {
${ast.fields.map((x) => this.indent + this.generate(x)).join('\n')}
}`;
    }
    _generateConfigField(ast) {
        return `${ast.name} = ${this.generate(ast.value)}`;
    }
    _generateConfigArrayExpr(ast) {
        return `[${ast.items.map((x) => this.generate(x)).join(', ')}]`;
    }
    _generateConfigInvocationExpr(ast) {
        if (ast.args.length === 0) {
            return ast.name;
        }
        else {
            return `${ast.name}(${ast.args
                .map((x) => (x.name ? x.name + ': ' : '') + this.generate(x.value))
                .join(', ')})`;
        }
    }
    _generatePlugin(ast) {
        return `plugin ${ast.name} {
${ast.fields.map((x) => this.indent + this.generate(x)).join('\n')}
}`;
    }
    _generatePluginField(ast) {
        return `${ast.name} = ${this.generate(ast.value)}`;
    }
    _generateDataModel(ast) {
        return `${ast.isAbstract ? 'abstract ' : ''}${ast.isView ? 'view' : 'model'} ${ast.name}${ast.superTypes.length > 0 ? ' extends ' + ast.superTypes.map((x) => { var _a; return (_a = x.ref) === null || _a === void 0 ? void 0 : _a.name; }).join(', ') : ''} {
${ast.fields.map((x) => this.indent + this.generate(x)).join('\n')}${ast.attributes.length > 0
            ? '\n\n' + ast.attributes.map((x) => this.indent + this.generate(x)).join('\n')
            : ''}
}`;
    }
    _generateDataModelField(ast) {
        return `${ast.name} ${this.fieldType(ast.type)}${ast.attributes.length > 0 ? ' ' + ast.attributes.map((x) => this.generate(x)).join(' ') : ''}`;
    }
    fieldType(type) {
        var _a;
        const baseType = type.type
            ? type.type
            : type.unsupported
                ? 'Unsupported(' + this.generate(type.unsupported.value) + ')'
                : (_a = type.reference) === null || _a === void 0 ? void 0 : _a.$refText;
        return `${baseType}${type.array ? '[]' : ''}${type.optional ? '?' : ''}`;
    }
    _generateDataModelAttribute(ast) {
        return this.attribute(ast);
    }
    _generateDataModelFieldAttribute(ast) {
        return this.attribute(ast);
    }
    attribute(ast) {
        const args = ast.args.length ? `(${ast.args.map((x) => this.generate(x)).join(', ')})` : '';
        return `${(0, utils_1.resolved)(ast.decl).name}${args}`;
    }
    _generateAttributeArg(ast) {
        if (ast.name) {
            return `${ast.name}: ${this.generate(ast.value)}`;
        }
        else {
            return this.generate(ast.value);
        }
    }
    _generateObjectExpr(ast) {
        return `{ ${ast.fields.map((field) => this.objectField(field)).join(', ')} }`;
    }
    objectField(field) {
        return `${field.name}: ${this.generate(field.value)}`;
    }
    _generateArrayExpr(ast) {
        return `[${ast.items.map((item) => this.generate(item)).join(', ')}]`;
    }
    _generateLiteralExpr(ast) {
        return this.options.quote === 'single' ? `'${ast.value}'` : `"${ast.value}"`;
    }
    _generateNumberLiteral(ast) {
        return ast.value.toString();
    }
    _generateBooleanLiteral(ast) {
        return ast.value.toString();
    }
    _generateUnaryExpr(ast) {
        return `${ast.operator}${this.unaryExprSpace}${this.generate(ast.operand)}`;
    }
    _generateBinaryExpr(ast) {
        const operator = ast.operator;
        const isCollectionPredicate = this.isCollectionPredicateOperator(operator);
        const rightExpr = this.generate(ast.right);
        const { left: isLeftParenthesis, right: isRightParenthesis } = this.isParenthesesNeededForBinaryExpr(ast);
        return `${isLeftParenthesis ? '(' : ''}${this.generate(ast.left)}${isLeftParenthesis ? ')' : ''}${isCollectionPredicate ? '' : this.binaryExprSpace}${operator}${isCollectionPredicate ? '' : this.binaryExprSpace}${isRightParenthesis ? '(' : ''}${isCollectionPredicate ? `[${rightExpr}]` : rightExpr}${isRightParenthesis ? ')' : ''}`;
    }
    _generateReferenceExpr(ast) {
        var _a;
        const args = ast.args.length ? `(${ast.args.map((x) => this.generate(x)).join(', ')})` : '';
        return `${(_a = ast.target.ref) === null || _a === void 0 ? void 0 : _a.name}${args}`;
    }
    _generateReferenceArg(ast) {
        return `${ast.name}:${this.generate(ast.value)}`;
    }
    _generateMemberExpr(ast) {
        var _a;
        return `${this.generate(ast.operand)}.${(_a = ast.member.ref) === null || _a === void 0 ? void 0 : _a.name}`;
    }
    _generateInvocationExpr(ast) {
        var _a;
        return `${(_a = ast.function.ref) === null || _a === void 0 ? void 0 : _a.name}(${ast.args.map((x) => this.argument(x)).join(', ')})`;
    }
    _generateNullExpr() {
        return 'null';
    }
    _generateThisExpr() {
        return 'this';
    }
    _generateAttribute(ast) {
        return `attribute ${ast.name}(${ast.params.map((x) => this.generate(x)).join(', ')})`;
    }
    _generateAttributeParam(ast) {
        return `${ast.default ? '_ ' : ''}${ast.name}: ${this.generate(ast.type)}`;
    }
    _generateAttributeParamType(ast) {
        var _a, _b;
        return `${(_a = ast.type) !== null && _a !== void 0 ? _a : (_b = ast.reference) === null || _b === void 0 ? void 0 : _b.$refText}${ast.array ? '[]' : ''}${ast.optional ? '?' : ''}`;
    }
    _generateFunctionDecl(ast) {
        return `function ${ast.name}(${ast.params.map((x) => this.generate(x)).join(', ')}) ${ast.returnType ? ': ' + this.generate(ast.returnType) : ''} {}`;
    }
    _generateFunctionParam(ast) {
        return `${ast.name}: ${this.generate(ast.type)}`;
    }
    _generateFunctionParamType(ast) {
        var _a, _b;
        return `${(_a = ast.type) !== null && _a !== void 0 ? _a : (_b = ast.reference) === null || _b === void 0 ? void 0 : _b.$refText}${ast.array ? '[]' : ''}`;
    }
    argument(ast) {
        return this.generate(ast.value);
    }
    get binaryExprSpace() {
        return ' '.repeat(this.options.binaryExprNumberOfSpaces);
    }
    get unaryExprSpace() {
        return ' '.repeat(this.options.unaryExprNumberOfSpaces);
    }
    get indent() {
        return ' '.repeat(this.options.indent);
    }
    isParenthesesNeededForBinaryExpr(ast) {
        const result = { left: false, right: false };
        const operator = ast.operator;
        const isCollectionPredicate = this.isCollectionPredicateOperator(operator);
        const currentPriority = ast_1.BinaryExprOperatorPriority[operator];
        if (ast.left.$type === ast_1.BinaryExpr &&
            ast_1.BinaryExprOperatorPriority[ast.left['operator']] < currentPriority) {
            result.left = true;
        }
        /**
         *  1 collection predicate operator has [] around the right operand, no need to add parenthesis.
         *  2 grammar is left associative, so if the right operand has the same priority still need to add parenthesis.
         **/
        if (!isCollectionPredicate &&
            ast.right.$type === ast_1.BinaryExpr &&
            ast_1.BinaryExprOperatorPriority[ast.right['operator']] <= currentPriority) {
            result.right = true;
        }
        return result;
    }
    isCollectionPredicateOperator(op) {
        return ['?', '!', '^'].includes(op);
    }
}
exports.ZModelCodeGenerator = ZModelCodeGenerator;
__decorate([
    gen(ast_1.Model)
], ZModelCodeGenerator.prototype, "_generateModel", null);
__decorate([
    gen(ast_1.DataSource)
], ZModelCodeGenerator.prototype, "_generateDataSource", null);
__decorate([
    gen(ast_1.Enum)
], ZModelCodeGenerator.prototype, "_generateEnum", null);
__decorate([
    gen(ast_1.EnumField)
], ZModelCodeGenerator.prototype, "_generateEnumField", null);
__decorate([
    gen(ast_1.GeneratorDecl)
], ZModelCodeGenerator.prototype, "_generateGenerator", null);
__decorate([
    gen(ast_1.ConfigField)
], ZModelCodeGenerator.prototype, "_generateConfigField", null);
__decorate([
    gen(ast_1.ConfigArrayExpr)
], ZModelCodeGenerator.prototype, "_generateConfigArrayExpr", null);
__decorate([
    gen(ast_1.ConfigInvocationExpr)
], ZModelCodeGenerator.prototype, "_generateConfigInvocationExpr", null);
__decorate([
    gen(ast_1.Plugin)
], ZModelCodeGenerator.prototype, "_generatePlugin", null);
__decorate([
    gen(ast_1.PluginField)
], ZModelCodeGenerator.prototype, "_generatePluginField", null);
__decorate([
    gen(ast_1.DataModel)
], ZModelCodeGenerator.prototype, "_generateDataModel", null);
__decorate([
    gen(ast_1.DataModelField)
], ZModelCodeGenerator.prototype, "_generateDataModelField", null);
__decorate([
    gen(ast_1.DataModelAttribute)
], ZModelCodeGenerator.prototype, "_generateDataModelAttribute", null);
__decorate([
    gen(ast_1.DataModelFieldAttribute)
], ZModelCodeGenerator.prototype, "_generateDataModelFieldAttribute", null);
__decorate([
    gen(ast_1.AttributeArg)
], ZModelCodeGenerator.prototype, "_generateAttributeArg", null);
__decorate([
    gen(ast_1.ObjectExpr)
], ZModelCodeGenerator.prototype, "_generateObjectExpr", null);
__decorate([
    gen(ast_1.ArrayExpr)
], ZModelCodeGenerator.prototype, "_generateArrayExpr", null);
__decorate([
    gen(ast_1.StringLiteral)
], ZModelCodeGenerator.prototype, "_generateLiteralExpr", null);
__decorate([
    gen(ast_1.NumberLiteral)
], ZModelCodeGenerator.prototype, "_generateNumberLiteral", null);
__decorate([
    gen(ast_1.BooleanLiteral)
], ZModelCodeGenerator.prototype, "_generateBooleanLiteral", null);
__decorate([
    gen(ast_1.UnaryExpr)
], ZModelCodeGenerator.prototype, "_generateUnaryExpr", null);
__decorate([
    gen(ast_1.BinaryExpr)
], ZModelCodeGenerator.prototype, "_generateBinaryExpr", null);
__decorate([
    gen(ast_1.ReferenceExpr)
], ZModelCodeGenerator.prototype, "_generateReferenceExpr", null);
__decorate([
    gen(ast_1.ReferenceArg)
], ZModelCodeGenerator.prototype, "_generateReferenceArg", null);
__decorate([
    gen(ast_1.MemberAccessExpr)
], ZModelCodeGenerator.prototype, "_generateMemberExpr", null);
__decorate([
    gen(ast_1.InvocationExpr)
], ZModelCodeGenerator.prototype, "_generateInvocationExpr", null);
__decorate([
    gen(ast_1.NullExpr)
], ZModelCodeGenerator.prototype, "_generateNullExpr", null);
__decorate([
    gen(ast_1.ThisExpr)
], ZModelCodeGenerator.prototype, "_generateThisExpr", null);
__decorate([
    gen(ast_1.Attribute)
], ZModelCodeGenerator.prototype, "_generateAttribute", null);
__decorate([
    gen(ast_1.AttributeParam)
], ZModelCodeGenerator.prototype, "_generateAttributeParam", null);
__decorate([
    gen(ast_1.AttributeParamType)
], ZModelCodeGenerator.prototype, "_generateAttributeParamType", null);
__decorate([
    gen(ast_1.FunctionDecl)
], ZModelCodeGenerator.prototype, "_generateFunctionDecl", null);
__decorate([
    gen(ast_1.FunctionParam)
], ZModelCodeGenerator.prototype, "_generateFunctionParam", null);
__decorate([
    gen(ast_1.FunctionParamType)
], ZModelCodeGenerator.prototype, "_generateFunctionParamType", null);
//# sourceMappingURL=zmodel-code-generator.js.map