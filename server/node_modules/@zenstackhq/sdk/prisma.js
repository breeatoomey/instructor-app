"use strict";
/* eslint-disable @typescript-eslint/no-var-requires */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.supportCreateMany = exports.getPrismaVersion = exports.getDMMF = exports.getPrismaClientImportSpec = void 0;
const internals_1 = require("@prisma/internals");
const runtime_1 = require("@zenstackhq/runtime");
const path_1 = __importDefault(require("path"));
const semver_1 = __importDefault(require("semver"));
const constants_1 = require("./constants");
const utils_1 = require("./utils");
/**
 * Given an import context directory and plugin options, compute the import spec for the Prisma Client.
 */
function getPrismaClientImportSpec(importingFromDir, options) {
    if (!options.prismaClientPath || options.prismaClientPath === '@prisma/client') {
        return '@prisma/client';
    }
    if (options.prismaClientPath.startsWith(constants_1.RUNTIME_PACKAGE) ||
        options.prismaClientPath.startsWith(runtime_1.DEFAULT_RUNTIME_LOAD_PATH)) {
        return options.prismaClientPath;
    }
    if (path_1.default.isAbsolute(options.prismaClientPath)) {
        // absolute path
        return options.prismaClientPath;
    }
    // resolve absolute path based on the zmodel file location
    const resolvedPrismaClientOutput = path_1.default.resolve(path_1.default.dirname(options.schemaPath), options.prismaClientPath);
    // translate to path relative to the importing context directory
    let result = path_1.default.relative(importingFromDir, resolvedPrismaClientOutput);
    // remove leading `node_modules` (which may be provided by the user)
    result = result.replace(/^([./\\]*)?node_modules\//, '');
    // compute prisma client absolute output dir relative to the importing file
    return normalizePath(result);
}
exports.getPrismaClientImportSpec = getPrismaClientImportSpec;
function normalizePath(p) {
    return p ? p.split(path_1.default.sep).join(path_1.default.posix.sep) : p;
}
/**
 * Loads Prisma DMMF
 */
function getDMMF(options) {
    return (0, internals_1.getDMMF)(options);
}
exports.getDMMF = getDMMF;
/**
 * Gets the installed Prisma's version
 */
function getPrismaVersion() {
    if (process.env.ZENSTACK_TEST === '1') {
        // test environment
        try {
            return require(path_1.default.resolve('./node_modules/@prisma/client/package.json')).version;
        }
        catch (_a) {
            return undefined;
        }
    }
    try {
        return require('@prisma/client/package.json').version;
    }
    catch (_b) {
        try {
            return require('prisma/package.json').version;
        }
        catch (_c) {
            return undefined;
        }
    }
}
exports.getPrismaVersion = getPrismaVersion;
/**
 * Returns if the given model supports `createMany` operation.
 */
function supportCreateMany(model) {
    // `createMany` is supported for sqlite since Prisma 5.12.0
    const prismaVersion = getPrismaVersion();
    const dsProvider = (0, utils_1.getDataSourceProvider)(model);
    return dsProvider !== 'sqlite' || (prismaVersion && semver_1.default.gte(prismaVersion, '5.12.0'));
}
exports.supportCreateMany = supportCreateMany;
//# sourceMappingURL=prisma.js.map