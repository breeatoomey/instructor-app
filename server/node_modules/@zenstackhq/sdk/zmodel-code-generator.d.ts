import { AstNode } from './ast';
/**
 * Options for the generator.
 */
export interface ZModelCodeOptions {
    binaryExprNumberOfSpaces: number;
    unaryExprNumberOfSpaces: number;
    indent: number;
    quote: 'single' | 'double';
}
/**
 * Generates ZModel source code from AST.
 */
export declare class ZModelCodeGenerator {
    private readonly options;
    constructor(options?: Partial<ZModelCodeOptions>);
    /**
     * Generates ZModel source code from AST.
     */
    generate(ast: AstNode): string;
    private _generateModel;
    private _generateDataSource;
    private _generateEnum;
    private _generateEnumField;
    private _generateGenerator;
    private _generateConfigField;
    private _generateConfigArrayExpr;
    private _generateConfigInvocationExpr;
    private _generatePlugin;
    private _generatePluginField;
    private _generateDataModel;
    private _generateDataModelField;
    private fieldType;
    private _generateDataModelAttribute;
    private _generateDataModelFieldAttribute;
    private attribute;
    private _generateAttributeArg;
    private _generateObjectExpr;
    private objectField;
    private _generateArrayExpr;
    private _generateLiteralExpr;
    private _generateNumberLiteral;
    private _generateBooleanLiteral;
    private _generateUnaryExpr;
    private _generateBinaryExpr;
    private _generateReferenceExpr;
    private _generateReferenceArg;
    private _generateMemberExpr;
    private _generateInvocationExpr;
    private _generateNullExpr;
    private _generateThisExpr;
    private _generateAttribute;
    private _generateAttributeParam;
    private _generateAttributeParamType;
    private _generateFunctionDecl;
    private _generateFunctionParam;
    private _generateFunctionParamType;
    private argument;
    private get binaryExprSpace();
    private get unaryExprSpace();
    private get indent();
    private isParenthesesNeededForBinaryExpr;
    private isCollectionPredicateOperator;
}
