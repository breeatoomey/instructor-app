"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.analyzePolicies = void 0;
const utils_1 = require("./utils");
const validation_1 = require("./validation");
function analyzePolicies(dataModel) {
    const allows = dataModel.attributes.filter((attr) => { var _a; return ((_a = attr.decl.ref) === null || _a === void 0 ? void 0 : _a.name) === '@@allow'; });
    const denies = dataModel.attributes.filter((attr) => { var _a; return ((_a = attr.decl.ref) === null || _a === void 0 ? void 0 : _a.name) === '@@deny'; });
    const create = toStaticPolicy('create', allows, denies);
    const read = toStaticPolicy('read', allows, denies);
    const update = toStaticPolicy('update', allows, denies);
    const del = toStaticPolicy('delete', allows, denies);
    const hasFieldValidation = (0, validation_1.hasValidationAttributes)(dataModel);
    return {
        allows,
        denies,
        create,
        read,
        update,
        delete: del,
        allowAll: create === true && read === true && update === true && del === true,
        denyAll: create === false && read === false && update === false && del === false,
        hasFieldValidation,
    };
}
exports.analyzePolicies = analyzePolicies;
function toStaticPolicy(operation, allows, denies) {
    const filteredDenies = forOperation(operation, denies);
    if (filteredDenies.some((rule) => (0, utils_1.getLiteral)(rule.args[1].value) === true)) {
        // any constant true deny rule
        return false;
    }
    const filteredAllows = forOperation(operation, allows);
    if (filteredAllows.length === 0) {
        // no allow rule
        return false;
    }
    if (filteredDenies.length === 0 &&
        filteredAllows.some((rule) => (0, utils_1.getLiteral)(rule.args[1].value) === true)) {
        // any constant true allow rule
        return true;
    }
    return undefined;
}
function forOperation(operation, rules) {
    return rules.filter((rule) => {
        const ops = (0, utils_1.getLiteral)(rule.args[0].value);
        if (!ops) {
            return false;
        }
        if (ops === 'all') {
            return true;
        }
        const splitOps = ops.split(',').map((p) => p.trim());
        return splitOps.includes(operation);
    });
}
//# sourceMappingURL=policy.js.map