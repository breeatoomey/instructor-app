"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", { value: true });
exports.withPolicy = void 0;
const cross_1 = require("../../cross");
const validation_1 = require("../../validation");
const logger_1 = require("../logger");
const proxy_1 = require("../proxy");
const handler_1 = require("./handler");
/**
 * Gets an enhanced Prisma client with access policy check.
 *
 * @param prisma The original Prisma client
 * @param context The policy evaluation context
 * @param policy The policy definition, will be loaded from default location if not provided
 * @param modelMeta The model metadata, will be loaded from default location if not provided
 *
 * @private
 */
function withPolicy(prisma, options, context) {
    const { modelMeta, policy } = options;
    // validate user context
    const userContext = context === null || context === void 0 ? void 0 : context.user;
    if (userContext && modelMeta.authModel) {
        const idFields = (0, cross_1.getIdFields)(modelMeta, modelMeta.authModel);
        if (!(0, validation_1.hasAllFields)(context.user, idFields.map((f) => f.name))) {
            throw new Error(`Invalid user context: must have valid ID field ${idFields.map((f) => `"${f.name}"`).join(', ')}`);
        }
        // validate user context for fields used in policy expressions
        const authSelector = policy.authSelector;
        if (authSelector) {
            Object.keys(authSelector).forEach((f) => {
                if (!(f in userContext)) {
                    const logger = new logger_1.Logger(prisma);
                    logger.warn(`User context does not have field "${f}" used in policy rules`);
                }
            });
        }
    }
    return (0, proxy_1.makeProxy)(prisma, modelMeta, (_prisma, model) => new handler_1.PolicyProxyHandler(_prisma, model, options, context), 'policy', options === null || options === void 0 ? void 0 : options.errorTransformer);
}
exports.withPolicy = withPolicy;
//# sourceMappingURL=index.js.map