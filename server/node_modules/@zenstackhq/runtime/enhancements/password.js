"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withPassword = void 0;
const constants_1 = require("../constants");
const cross_1 = require("../cross");
const proxy_1 = require("./proxy");
/**
 * Gets an enhanced Prisma client that supports `@password` attribute.
 *
 * @private
 */
function withPassword(prisma, options) {
    return (0, proxy_1.makeProxy)(prisma, options.modelMeta, (_prisma, model) => new PasswordHandler(_prisma, model, options), 'password');
}
exports.withPassword = withPassword;
// eslint-disable-next-line @typescript-eslint/no-var-requires
const hashFunc = typeof EdgeRuntime === 'string' ? require('bcryptjs').hashSync : require('bcryptjs').hash;
class PasswordHandler extends proxy_1.DefaultPrismaProxyHandler {
    constructor(prisma, model, options) {
        super(prisma, model, options);
    }
    // base override
    preprocessArgs(action, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const actionsOfInterest = ['create', 'createMany', 'update', 'updateMany', 'upsert'];
            if (args && args.data && actionsOfInterest.includes(action)) {
                yield this.preprocessWritePayload(this.model, action, args);
            }
            return args;
        });
    }
    preprocessWritePayload(model, action, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const visitor = new cross_1.NestedWriteVisitor(this.options.modelMeta, {
                field: (field, _action, data, context) => __awaiter(this, void 0, void 0, function* () {
                    var _a, _b, _c;
                    const pwdAttr = (_a = field.attributes) === null || _a === void 0 ? void 0 : _a.find((attr) => attr.name === '@password');
                    if (pwdAttr && field.type === 'String') {
                        // hash password value
                        let salt = (_b = pwdAttr.args.find((arg) => arg.name === 'salt')) === null || _b === void 0 ? void 0 : _b.value;
                        if (!salt) {
                            salt = (_c = pwdAttr.args.find((arg) => arg.name === 'saltLength')) === null || _c === void 0 ? void 0 : _c.value;
                        }
                        if (!salt) {
                            salt = constants_1.DEFAULT_PASSWORD_SALT_LENGTH;
                        }
                        context.parent[field.name] = yield hashFunc(data, salt);
                    }
                }),
            });
            yield visitor.visit(model, action, args);
        });
    }
}
//# sourceMappingURL=password.js.map