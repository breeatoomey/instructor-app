"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
/**
 * A logger that uses an existing Prisma client to emit.
 */
class Logger {
    constructor(prisma) {
        this.prisma = prisma;
        this.eventNames = [];
        const engine = this.prisma._engine;
        this.emitter = engine ? engine.logEmitter : undefined;
        if (this.emitter) {
            if (typeof this.emitter.eventNames === 'function') {
                // Node.js
                this.eventNames = this.emitter.eventNames();
            }
            else if ('events' in this.emitter && this.emitter.events && typeof this.emitter.events === 'object') {
                // edge runtime
                this.eventNames = Object.keys(this.emitter.events);
            }
            else {
                this.eventNames = [];
            }
        }
    }
    /**
     * Checks if a log level is enabled.
     */
    enabled(level) {
        return !!this.eventNames.includes(level);
    }
    /**
     * Generates a message with the given level.
     */
    log(level, message) {
        var _a;
        (_a = this.emitter) === null || _a === void 0 ? void 0 : _a.emit(level, {
            timestamp: new Date(),
            message,
            target: 'zenstack',
        });
    }
    /**
     * Generates a log message with info level.
     */
    info(message) {
        this.log('info', message);
    }
    /**
     * Generates a log message with warn level.
     */
    warn(message) {
        this.log('warn', message);
    }
    /**
     * Generates a log message with error level.
     */
    error(message) {
        this.log('error', message);
    }
}
exports.Logger = Logger;
//# sourceMappingURL=logger.js.map