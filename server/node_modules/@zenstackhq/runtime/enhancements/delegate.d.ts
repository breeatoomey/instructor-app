import type { DbClientContract } from '../types';
import type { InternalEnhancementOptions } from './create-enhancement';
import { DefaultPrismaProxyHandler } from './proxy';
export declare function withDelegate<DbClient extends object>(prisma: DbClient, options: InternalEnhancementOptions): DbClient;
export declare class DelegateProxyHandler extends DefaultPrismaProxyHandler {
    private readonly logger;
    private readonly queryUtils;
    constructor(prisma: DbClientContract, model: string, options: InternalEnhancementOptions);
    findFirst(args: any): Promise<unknown>;
    findFirstOrThrow(args: any): Promise<unknown>;
    findUnique(args: any): Promise<unknown>;
    findUniqueOrThrow(args: any): Promise<unknown>;
    findMany(args: any): Promise<unknown[]>;
    private doFind;
    private injectWhereHierarchy;
    private buildWhereHierarchy;
    private injectSelectIncludeHierarchy;
    private buildSelectIncludeHierarchy;
    private injectBaseFieldSelect;
    private injectBaseIncludeRecursively;
    private injectConcreteIncludeRecursively;
    create(args: any): Promise<any>;
    createMany(args: {
        data: any;
        skipDuplicates?: boolean;
    }): Promise<{
        count: number;
    }>;
    private doCreate;
    private injectCreateHierarchy;
    private doProcessCreatePayload;
    private ensureBaseCreateHierarchy;
    private injectBaseFieldData;
    update(args: any): Promise<unknown>;
    updateMany(args: any): Promise<{
        count: number;
    }>;
    upsert(args: any): Promise<unknown>;
    private doUpdate;
    private doUpdateMany;
    private injectUpdateHierarchy;
    private doProcessUpdatePayload;
    delete(args: any): Promise<unknown>;
    deleteMany(args: any): Promise<{
        count: number;
    }>;
    private doDeleteMany;
    private deleteBaseRecursively;
    private doDelete;
    aggregate(args: any): Promise<unknown>;
    count(args: any): Promise<unknown>;
    groupBy(args: any): Promise<unknown>;
    private checkAggregationArgs;
    private extractSelectInclude;
    private makeAuxRelationName;
    private getModelName;
    private getIdFields;
    private getModelInfo;
    private getBaseModel;
    private involvesDelegateModel;
    private isDelegateOrDescendantOfDelegate;
    private assembleHierarchy;
    private assembleUp;
    private assembleDown;
}
