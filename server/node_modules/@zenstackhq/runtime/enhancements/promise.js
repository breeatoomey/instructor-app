"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFluentPromise = exports.createDeferredPromise = void 0;
const cross_1 = require("../cross");
/**
 * Creates a promise that only executes when it's awaited or .then() is called.
 * @see https://github.com/prisma/prisma/blob/main/packages/client/src/runtime/core/request/createPrismaPromise.ts
 */
function createDeferredPromise(callback) {
    let promise;
    const cb = () => {
        try {
            return (promise !== null && promise !== void 0 ? promise : (promise = valueToPromise(callback())));
        }
        catch (err) {
            // deal with synchronous errors
            return Promise.reject(err);
        }
    };
    return {
        then(onFulfilled, onRejected) {
            return cb().then(onFulfilled, onRejected);
        },
        catch(onRejected) {
            return cb().catch(onRejected);
        },
        finally(onFinally) {
            return cb().finally(onFinally);
        },
        [Symbol.toStringTag]: 'ZenStackPromise',
    };
}
exports.createDeferredPromise = createDeferredPromise;
function valueToPromise(thing) {
    if (typeof thing === 'object' && typeof (thing === null || thing === void 0 ? void 0 : thing.then) === 'function') {
        return thing;
    }
    else {
        return Promise.resolve(thing);
    }
}
/**
 * Create a deferred promise with fluent API call stub installed.
 *
 * @param callback The callback to execute when the promise is awaited.
 * @param parentArgs The parent promise's query args.
 * @param modelMeta The model metadata.
 * @param model The model name.
 */
function createFluentPromise(callback, parentArgs, modelMeta, model) {
    const promise = createDeferredPromise(callback);
    const modelInfo = (0, cross_1.getModelInfo)(modelMeta, model);
    if (!modelInfo) {
        return promise;
    }
    // install fluent call stub for model fields
    Object.values(modelInfo.fields)
        .filter((field) => field.isDataModel)
        .forEach((field) => {
        // e.g., `posts` in `db.user.findUnique(...).posts()`
        promise[field.name] = (fluentArgs) => {
            if (field.isArray) {
                // an array relation terminates fluent call chain
                return createDeferredPromise(() => __awaiter(this, void 0, void 0, function* () {
                    var _a;
                    setFluentSelect(parentArgs, field.name, fluentArgs !== null && fluentArgs !== void 0 ? fluentArgs : true);
                    const parentResult = yield promise;
                    return (_a = parentResult === null || parentResult === void 0 ? void 0 : parentResult[field.name]) !== null && _a !== void 0 ? _a : null;
                }));
            }
            else {
                fluentArgs = Object.assign({}, fluentArgs);
                // create a chained subsequent fluent call promise
                return createFluentPromise(() => __awaiter(this, void 0, void 0, function* () {
                    var _b;
                    setFluentSelect(parentArgs, field.name, fluentArgs);
                    const parentResult = yield promise;
                    return (_b = parentResult === null || parentResult === void 0 ? void 0 : parentResult[field.name]) !== null && _b !== void 0 ? _b : null;
                }), fluentArgs, modelMeta, field.type);
            }
        };
    });
    return promise;
}
exports.createFluentPromise = createFluentPromise;
function setFluentSelect(args, fluentFieldName, fluentArgs) {
    delete args.include;
    args.select = { [fluentFieldName]: fluentArgs };
}
//# sourceMappingURL=promise.js.map