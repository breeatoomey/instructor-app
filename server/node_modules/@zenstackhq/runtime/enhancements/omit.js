"use strict";
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-explicit-any */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withOmit = void 0;
const cross_1 = require("../cross");
const proxy_1 = require("./proxy");
/**
 * Gets an enhanced Prisma client that supports `@omit` attribute.
 *
 * @private
 */
function withOmit(prisma, options) {
    return (0, proxy_1.makeProxy)(prisma, options.modelMeta, (_prisma, model) => new OmitHandler(_prisma, model, options), 'omit');
}
exports.withOmit = withOmit;
class OmitHandler extends proxy_1.DefaultPrismaProxyHandler {
    constructor(prisma, model, options) {
        super(prisma, model, options);
    }
    // base override
    processResultEntity(data) {
        return __awaiter(this, void 0, void 0, function* () {
            if (data) {
                for (const value of (0, cross_1.enumerate)(data)) {
                    yield this.doPostProcess(value, this.model);
                }
            }
            return data;
        });
    }
    doPostProcess(entityData, model) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            for (const field of (0, cross_1.getModelFields)(entityData)) {
                const fieldInfo = yield (0, cross_1.resolveField)(this.options.modelMeta, model, field);
                if (!fieldInfo) {
                    continue;
                }
                const shouldOmit = (_a = fieldInfo.attributes) === null || _a === void 0 ? void 0 : _a.find((attr) => attr.name === '@omit');
                if (shouldOmit) {
                    delete entityData[field];
                }
                if (fieldInfo.isDataModel) {
                    const items = fieldInfo.isArray && Array.isArray(entityData[field]) ? entityData[field] : [entityData[field]];
                    for (const item of items) {
                        // recurse
                        yield this.doPostProcess(item, fieldInfo.type);
                    }
                }
            }
        });
    }
}
//# sourceMappingURL=omit.js.map