"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/browser/index.ts
var browser_exports = {};
__export(browser_exports, {
  deserialize: () => deserialize,
  serialize: () => serialize
});
module.exports = __toCommonJS(browser_exports);

// src/browser/serialization.ts
var import_buffer = require("buffer");
var import_decimal = __toESM(require("decimal.js"));
var import_superjson = __toESM(require("superjson"));
import_superjson.default.registerCustom(
  {
    isApplicable: (v) => import_decimal.default.isDecimal(v),
    serialize: (v) => v.toJSON(),
    deserialize: (v) => new import_decimal.default(v)
  },
  "Decimal"
);
import_superjson.default.registerCustom(
  {
    isApplicable: (v) => import_buffer.Buffer.isBuffer(v),
    serialize: (v) => v.toString("base64"),
    deserialize: (v) => import_buffer.Buffer.from(v, "base64")
  },
  "Bytes"
);
function serialize(value) {
  const { json, meta } = import_superjson.default.serialize(value);
  return { data: json, meta };
}
function deserialize(value, meta) {
  return import_superjson.default.deserialize({ json: value, meta });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  deserialize,
  serialize
});
//# sourceMappingURL=index.js.map