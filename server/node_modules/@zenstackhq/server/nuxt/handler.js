"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEventHandler = void 0;
const h3_1 = require("h3");
const rpc_1 = __importDefault(require("../api/rpc"));
const shared_1 = require("../shared");
function createEventHandler(options) {
    return (0, h3_1.defineEventHandler)((event) => __awaiter(this, void 0, void 0, function* () {
        var _a;
        const { modelMeta, zodSchemas } = (0, shared_1.loadAssets)(options);
        const requestHandler = (_a = options.handler) !== null && _a !== void 0 ? _a : (0, rpc_1.default)();
        const prisma = (yield options.getPrisma(event));
        if (!prisma) {
            (0, h3_1.setResponseStatus)(event, 500);
            return { message: 'unable to get prisma from request context' };
        }
        const routerParam = (0, h3_1.getRouterParams)(event);
        const query = yield (0, h3_1.getQuery)(event);
        let reqBody;
        if (event.method === 'POST' || event.method === 'PUT' || event.method === 'PATCH') {
            reqBody = yield (0, h3_1.readBody)(event);
        }
        try {
            const { status, body } = yield requestHandler({
                method: event.method,
                path: routerParam._,
                query: query,
                requestBody: reqBody,
                prisma,
                modelMeta,
                zodSchemas,
            });
            (0, h3_1.setResponseStatus)(event, status);
            return body;
        }
        catch (err) {
            (0, h3_1.setResponseStatus)(event, 500);
            return { message: `An unhandled error occurred: ${err}` };
        }
    }));
}
exports.createEventHandler = createEventHandler;
//# sourceMappingURL=handler.js.map