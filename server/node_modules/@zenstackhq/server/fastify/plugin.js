"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZenStackFastifyPlugin = void 0;
const fastify_plugin_1 = __importDefault(require("fastify-plugin"));
const rpc_1 = __importDefault(require("../api/rpc"));
const utils_1 = require("../api/utils");
const shared_1 = require("../shared");
/**
 * Fastify plugin for handling CRUD requests.
 */
const pluginHandler = (fastify, options, done) => {
    var _a, _b;
    const prefix = (_a = options.prefix) !== null && _a !== void 0 ? _a : '';
    (0, utils_1.logInfo)(options.logger, `ZenStackPlugin installing routes at prefix: ${prefix}`);
    const { modelMeta, zodSchemas } = (0, shared_1.loadAssets)(options);
    const requestHandler = (_b = options.handler) !== null && _b !== void 0 ? _b : (0, rpc_1.default)();
    fastify.all(`${prefix}/*`, (request, reply) => __awaiter(void 0, void 0, void 0, function* () {
        const prisma = (yield options.getPrisma(request, reply));
        if (!prisma) {
            reply.status(500).send({ message: 'unable to get prisma from request context' });
            return reply;
        }
        try {
            const response = yield requestHandler({
                method: request.method,
                path: request.params['*'],
                query: request.query,
                requestBody: request.body,
                prisma,
                modelMeta,
                zodSchemas,
                logger: options.logger,
            });
            reply.status(response.status).send(response.body);
        }
        catch (err) {
            reply.status(500).send({ message: `An unhandled error occurred: ${err}` });
        }
        return reply;
    }));
    done();
};
const plugin = (0, fastify_plugin_1.default)(pluginHandler);
exports.ZenStackFastifyPlugin = plugin;
exports.default = plugin;
//# sourceMappingURL=plugin.js.map