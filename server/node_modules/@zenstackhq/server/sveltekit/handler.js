"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SvelteKitHandler = void 0;
const rpc_1 = __importDefault(require("../api/rpc"));
const utils_1 = require("../api/utils");
const shared_1 = require("../shared");
/**
 * SvelteKit server hooks handler for handling CRUD requests.
 */
function createHandler(options) {
    var _a;
    (0, utils_1.logInfo)(options.logger, `ZenStackHandler installing routes at prefix: ${options.prefix}`);
    const { modelMeta, zodSchemas } = (0, shared_1.loadAssets)(options);
    const requestHandler = (_a = options.handler) !== null && _a !== void 0 ? _a : (0, rpc_1.default)();
    return (_b) => __awaiter(this, [_b], void 0, function* ({ event, resolve }) {
        if (event.url.pathname.startsWith(options.prefix)) {
            const prisma = (yield options.getPrisma(event));
            if (!prisma) {
                return new Response(JSON.stringify({ message: 'unable to get prisma from request context' }), {
                    status: 400,
                    headers: {
                        'content-type': 'application/json',
                    },
                });
            }
            const query = Object.fromEntries(event.url.searchParams);
            let requestBody;
            if (event.request.body) {
                const text = yield event.request.text();
                if (text) {
                    requestBody = JSON.parse(text);
                }
            }
            const path = event.url.pathname.substring(options.prefix.length);
            try {
                const r = yield requestHandler({
                    method: event.request.method,
                    path,
                    query,
                    requestBody,
                    prisma,
                    modelMeta,
                    zodSchemas,
                });
                return new Response(JSON.stringify(r.body), {
                    status: r.status,
                    headers: {
                        'content-type': 'application/json',
                    },
                });
            }
            catch (err) {
                return new Response(JSON.stringify({ message: `An unhandled error occurred: ${err}` }), {
                    status: 500,
                    headers: {
                        'content-type': 'application/json',
                    },
                });
            }
        }
        return resolve(event);
    });
}
exports.default = createHandler;
exports.SvelteKitHandler = createHandler;
//# sourceMappingURL=handler.js.map