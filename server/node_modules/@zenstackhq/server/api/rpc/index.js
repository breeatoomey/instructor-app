"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RPCApiHandler = void 0;
const runtime_1 = require("@zenstackhq/runtime");
const superjson_1 = __importDefault(require("superjson"));
const upper_case_first_1 = require("upper-case-first");
const zod_validation_error_1 = require("zod-validation-error");
const base_1 = require("../base");
const utils_1 = require("../utils");
(0, utils_1.registerCustomSerializers)();
const ERROR_STATUS_MAPPING = {
    [runtime_1.PrismaErrorCode.CONSTRAINED_FAILED]: 403,
    [runtime_1.PrismaErrorCode.REQUIRED_CONNECTED_RECORD_NOT_FOUND]: 404,
    [runtime_1.PrismaErrorCode.DEPEND_ON_RECORD_NOT_FOUND]: 404,
};
/**
 * Prisma RPC style API request handler that mirrors the Prisma Client API
 */
class RequestHandler extends base_1.APIHandlerBase {
    handleRequest(_a) {
        return __awaiter(this, arguments, void 0, function* ({ prisma, method, path, query, requestBody, modelMeta, zodSchemas, logger, }) {
            var _b, _c, _d, _e;
            modelMeta = modelMeta !== null && modelMeta !== void 0 ? modelMeta : this.defaultModelMeta;
            if (!modelMeta) {
                throw new Error('Model metadata is not provided or loaded from default location');
            }
            const parts = path.split('/').filter((p) => !!p);
            const op = parts.pop();
            const model = parts.pop();
            if (parts.length !== 0 || !op || !model) {
                return { status: 400, body: this.makeError('invalid request path') };
            }
            method = method.toUpperCase();
            const dbOp = op;
            let args;
            let resCode = 200;
            switch (dbOp) {
                case 'create':
                case 'createMany':
                case 'upsert':
                    if (method !== 'POST') {
                        return {
                            status: 400,
                            body: this.makeError('invalid request method, only POST is supported'),
                        };
                    }
                    if (!requestBody) {
                        return { status: 400, body: this.makeError('missing request body') };
                    }
                    args = requestBody;
                    // TODO: upsert's status code should be conditional
                    resCode = 201;
                    break;
                case 'findFirst':
                case 'findUnique':
                case 'findMany':
                case 'aggregate':
                case 'groupBy':
                case 'count':
                case 'check':
                    if (method !== 'GET') {
                        return {
                            status: 400,
                            body: this.makeError('invalid request method, only GET is supported'),
                        };
                    }
                    try {
                        args = (query === null || query === void 0 ? void 0 : query.q) ? this.unmarshalQ(query.q, query.meta) : {};
                    }
                    catch (_f) {
                        return { status: 400, body: this.makeError('invalid "q" query parameter') };
                    }
                    break;
                case 'update':
                case 'updateMany':
                    if (method !== 'PUT' && method !== 'PATCH') {
                        return {
                            status: 400,
                            body: this.makeError('invalid request method, only PUT AND PATCH are supported'),
                        };
                    }
                    if (!requestBody) {
                        return { status: 400, body: this.makeError('missing request body') };
                    }
                    args = requestBody;
                    break;
                case 'delete':
                case 'deleteMany':
                    if (method !== 'DELETE') {
                        return {
                            status: 400,
                            body: this.makeError('invalid request method, only DELETE is supported'),
                        };
                    }
                    try {
                        args = (query === null || query === void 0 ? void 0 : query.q) ? this.unmarshalQ(query.q, query.meta) : {};
                    }
                    catch (_g) {
                        return { status: 400, body: this.makeError('invalid "q" query parameter') };
                    }
                    break;
                default:
                    return { status: 400, body: this.makeError('invalid operation: ' + op) };
            }
            const { error, zodErrors, data: parsedArgs } = yield this.processRequestPayload(args, model, dbOp, zodSchemas);
            if (error) {
                return { status: 422, body: this.makeError(error, runtime_1.CrudFailureReason.DATA_VALIDATION_VIOLATION, zodErrors) };
            }
            try {
                if (!prisma[model]) {
                    return { status: 400, body: this.makeError(`unknown model name: ${model}`) };
                }
                const result = yield prisma[model][dbOp](parsedArgs);
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                let response = { data: result };
                // superjson serialize response
                if (result) {
                    const { json, meta } = superjson_1.default.serialize(result);
                    response = { data: json };
                    if (meta) {
                        response.meta = { serialization: meta };
                    }
                }
                return { status: resCode, body: response };
            }
            catch (err) {
                if ((0, runtime_1.isPrismaClientKnownRequestError)(err)) {
                    let status;
                    if (((_b = err.meta) === null || _b === void 0 ? void 0 : _b.reason) === runtime_1.CrudFailureReason.DATA_VALIDATION_VIOLATION) {
                        // data validation error
                        status = 422;
                    }
                    else {
                        status = (_c = ERROR_STATUS_MAPPING[err.code]) !== null && _c !== void 0 ? _c : 400;
                    }
                    const { error } = this.makeError(err.message, (_d = err.meta) === null || _d === void 0 ? void 0 : _d.reason, (_e = err.meta) === null || _e === void 0 ? void 0 : _e.zodErrors);
                    return {
                        status,
                        body: {
                            error: Object.assign(Object.assign({}, error), { prisma: true, code: err.code }),
                        },
                    };
                }
                else if ((0, runtime_1.isPrismaClientUnknownRequestError)(err) || (0, runtime_1.isPrismaClientValidationError)(err)) {
                    (0, utils_1.logError)(logger, err.message);
                    return {
                        status: 400,
                        body: {
                            error: {
                                prisma: true,
                                message: err.message,
                            },
                        },
                    };
                }
                else {
                    const _err = err;
                    (0, utils_1.logError)(logger, _err.message + (_err.stack ? '\n' + _err.stack : ''));
                    return {
                        status: 400,
                        body: this.makeError(err.message),
                    };
                }
            }
        });
    }
    makeError(message, reason, zodErrors) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const error = { message, reason };
        if (reason === runtime_1.CrudFailureReason.ACCESS_POLICY_VIOLATION || reason === runtime_1.CrudFailureReason.RESULT_NOT_READABLE) {
            error.rejectedByPolicy = true;
        }
        if (reason === runtime_1.CrudFailureReason.DATA_VALIDATION_VIOLATION) {
            error.rejectedByValidation = true;
        }
        if (zodErrors) {
            error.zodErrors = zodErrors;
        }
        return { error };
    }
    processRequestPayload(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    args, model, dbOp, zodSchemas) {
        return __awaiter(this, void 0, void 0, function* () {
            const { meta } = args, rest = __rest(args, ["meta"]);
            if (meta === null || meta === void 0 ? void 0 : meta.serialization) {
                // superjson deserialization
                args = superjson_1.default.deserialize({ json: rest, meta: meta.serialization });
            }
            return this.zodValidate(zodSchemas, model, dbOp, args);
        });
    }
    getZodSchema(zodSchemas, model, operation) {
        var _a, _b;
        // e.g.: UserInputSchema { findUnique: [schema] }
        return (_b = (_a = zodSchemas.input) === null || _a === void 0 ? void 0 : _a[`${(0, upper_case_first_1.upperCaseFirst)(model)}InputSchema`]) === null || _b === void 0 ? void 0 : _b[operation];
    }
    zodValidate(zodSchemas, model, operation, args) {
        const zodSchema = zodSchemas && this.getZodSchema(zodSchemas, model, operation);
        if (zodSchema) {
            const parseResult = zodSchema.safeParse(args);
            if (parseResult.success) {
                return { data: args, error: undefined, zodErrors: undefined };
            }
            else {
                return {
                    data: undefined,
                    error: (0, zod_validation_error_1.fromZodError)(parseResult.error).message,
                    zodErrors: parseResult.error,
                };
            }
        }
        else {
            return { data: args, error: undefined, zodErrors: undefined };
        }
    }
    unmarshalQ(value, meta) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        let parsedValue;
        try {
            parsedValue = JSON.parse(value);
        }
        catch (_a) {
            throw new Error('invalid "q" query parameter');
        }
        if (meta) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            let parsedMeta;
            try {
                parsedMeta = JSON.parse(meta);
            }
            catch (_b) {
                throw new Error('invalid "meta" query parameter');
            }
            if (parsedMeta.serialization) {
                return superjson_1.default.deserialize({ json: parsedValue, meta: parsedMeta.serialization });
            }
        }
        return parsedValue;
    }
}
function makeHandler() {
    const handler = new RequestHandler();
    return handler.handleRequest.bind(handler);
}
exports.default = makeHandler;
exports.RPCApiHandler = makeHandler;
//# sourceMappingURL=index.js.map