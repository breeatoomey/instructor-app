import { type DynamicModule, type FactoryProvider, type ModuleMetadata, type Provider } from '@nestjs/common';
/**
 * The default token used to export the enhanced Prisma service.
 */
export declare const ENHANCED_PRISMA = "ENHANCED_PRISMA";
/**
 * ZenStack module options.
 */
export interface ZenStackModuleOptions {
    /**
     * A callback for getting an enhanced `PrismaClient`.
     */
    getEnhancedPrisma: () => unknown;
}
/**
 * ZenStack module async registration options.
 */
export interface ZenStackModuleAsyncOptions extends Pick<ModuleMetadata, 'imports'> {
    /**
     * Whether the module is global-scoped.
     */
    global?: boolean;
    /**
     * The token to export the enhanced Prisma service. Default is {@link ENHANCED_PRISMA}.
     */
    exportToken?: string;
    /**
     * The factory function to create the enhancement options.
     */
    useFactory: (...args: unknown[]) => Promise<ZenStackModuleOptions> | ZenStackModuleOptions;
    /**
     * The dependencies to inject into the factory function.
     */
    inject?: FactoryProvider['inject'];
    /**
     * Extra providers to facilitate dependency injection.
     */
    extraProviders?: Provider[];
}
/**
 * The ZenStack module for NestJS. The module exports an enhanced Prisma service,
 * by default with token {@link ENHANCED_PRISMA}.
 */
export declare class ZenStackModule {
    /**
     * Registers the ZenStack module with the specified options.
     */
    static registerAsync(options: ZenStackModuleAsyncOptions): DynamicModule;
}
