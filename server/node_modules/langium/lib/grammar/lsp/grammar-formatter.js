"use strict";
/******************************************************************************
 * Copyright 2022 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LangiumGrammarFormatter = void 0;
const formatter_1 = require("../../lsp/formatter");
const ast = __importStar(require("../generated/ast"));
class LangiumGrammarFormatter extends formatter_1.AbstractFormatter {
    format(node) {
        if (ast.isCrossReference(node)) {
            const formatter = this.getNodeFormatter(node);
            formatter.properties('type', 'terminal').surround(formatter_1.Formatting.noSpace());
        }
        else if (ast.isParserRule(node)) {
            const formatter = this.getNodeFormatter(node);
            formatter.keywords('entry', 'fragment', 'returns').append(formatter_1.Formatting.oneSpace());
            if ((node.inferredType || node.returnType || node.dataType) && node.parameters.length === 0) {
                formatter.property('name').append(formatter_1.Formatting.oneSpace());
            }
            else {
                formatter.property('name').append(formatter_1.Formatting.noSpace());
            }
            formatter.properties('parameters').append(formatter_1.Formatting.noSpace());
            formatter.keywords(',').append(formatter_1.Formatting.oneSpace());
            formatter.keywords('<').append(formatter_1.Formatting.noSpace());
            const semicolon = formatter.keyword(';');
            const colon = formatter.keyword(':');
            colon.prepend(formatter_1.Formatting.noSpace());
            formatter.interior(colon, semicolon).prepend(formatter_1.Formatting.indent());
            semicolon.prepend(formatter_1.Formatting.fit(formatter_1.Formatting.noSpace(), formatter_1.Formatting.newLine()));
            formatter.node(node).prepend(formatter_1.Formatting.noIndent());
        }
        else if (ast.isTerminalRule(node)) {
            const formatter = this.getNodeFormatter(node);
            if (node.type) {
                formatter.property('name').append(formatter_1.Formatting.oneSpace());
                formatter.keyword('returns').append(formatter_1.Formatting.oneSpace());
            }
            formatter.keywords('hidden', 'terminal', 'fragment').append(formatter_1.Formatting.oneSpace());
            formatter.keyword(':').prepend(formatter_1.Formatting.noSpace());
            formatter.keyword(';').prepend(formatter_1.Formatting.fit(formatter_1.Formatting.noSpace(), formatter_1.Formatting.newLine()));
            formatter.node(node).prepend(formatter_1.Formatting.noIndent());
        }
        else if (ast.isAction(node)) {
            const formatter = this.getNodeFormatter(node);
            formatter.keyword('{').append(formatter_1.Formatting.noSpace());
            formatter.keywords('.', '+=', '=').surround(formatter_1.Formatting.noSpace());
            formatter.keyword('}').prepend(formatter_1.Formatting.noSpace());
        }
        else if (ast.isInferredType(node)) {
            const formatter = this.getNodeFormatter(node);
            formatter.keywords('infer', 'infers').append(formatter_1.Formatting.oneSpace());
        }
        else if (ast.isAssignment(node)) {
            const formatter = this.getNodeFormatter(node);
            formatter.keywords('=', '+=', '?=').surround(formatter_1.Formatting.noSpace());
        }
        else if (ast.isRuleCall(node)) {
            const formatter = this.getNodeFormatter(node);
            formatter.keyword('<').surround(formatter_1.Formatting.noSpace());
            formatter.keyword(',').append(formatter_1.Formatting.oneSpace());
            formatter.properties('arguments').append(formatter_1.Formatting.noSpace());
        }
        if (ast.isAbstractElement(node)) {
            const formatter = this.getNodeFormatter(node);
            formatter.property('cardinality').prepend(formatter_1.Formatting.noSpace());
        }
    }
}
exports.LangiumGrammarFormatter = LangiumGrammarFormatter;
//# sourceMappingURL=grammar-formatter.js.map