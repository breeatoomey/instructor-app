"use strict";
/******************************************************************************
 * Copyright 2022 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.LangiumGrammarDefinitionProvider = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
const lsp_1 = require("../../lsp");
const ast_util_1 = require("../../utils/ast-util");
const grammar_util_1 = require("../../utils/grammar-util");
const ast_1 = require("../generated/ast");
const internal_grammar_util_1 = require("../internal-grammar-util");
class LangiumGrammarDefinitionProvider extends lsp_1.DefaultDefinitionProvider {
    constructor(services) {
        super(services);
        this.documents = services.shared.workspace.LangiumDocuments;
    }
    collectLocationLinks(sourceCstNode, _params) {
        var _a, _b, _c, _d, _e, _f;
        const pathFeature = 'path';
        if ((0, ast_1.isGrammarImport)(sourceCstNode.element) && ((_a = (0, grammar_util_1.findAssignment)(sourceCstNode)) === null || _a === void 0 ? void 0 : _a.feature) === pathFeature) {
            const importedGrammar = (0, internal_grammar_util_1.resolveImport)(this.documents, sourceCstNode.element);
            if (importedGrammar === null || importedGrammar === void 0 ? void 0 : importedGrammar.$document) {
                const targetObject = (_b = this.findTargetObject(importedGrammar)) !== null && _b !== void 0 ? _b : importedGrammar;
                const selectionRange = (_d = (_c = this.nameProvider.getNameNode(targetObject)) === null || _c === void 0 ? void 0 : _c.range) !== null && _d !== void 0 ? _d : vscode_languageserver_1.Range.create(0, 0, 0, 0);
                const previewRange = (_f = (_e = targetObject.$cstNode) === null || _e === void 0 ? void 0 : _e.range) !== null && _f !== void 0 ? _f : vscode_languageserver_1.Range.create(0, 0, 0, 0);
                return [
                    vscode_languageserver_1.LocationLink.create(importedGrammar.$document.uri.toString(), previewRange, selectionRange, sourceCstNode.range)
                ];
            }
            return undefined;
        }
        return super.collectLocationLinks(sourceCstNode, _params);
    }
    findTargetObject(importedGrammar) {
        // Jump to grammar name or the first element
        if (importedGrammar.isDeclared) {
            return importedGrammar;
        }
        return (0, ast_util_1.streamContents)(importedGrammar).head();
    }
}
exports.LangiumGrammarDefinitionProvider = LangiumGrammarDefinitionProvider;
//# sourceMappingURL=grammar-definition.js.map