"use strict";
/******************************************************************************
 * Copyright 2021 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLangiumGrammarServices = exports.LangiumGrammarModule = void 0;
const default_module_1 = require("../default-module");
const dependency_injection_1 = require("../dependency-injection");
const module_1 = require("./generated/module");
const grammar_scope_1 = require("./references/grammar-scope");
const validator_1 = require("./validation/validator");
const grammar_code_actions_1 = require("./lsp/grammar-code-actions");
const grammar_folding_ranges_1 = require("./lsp/grammar-folding-ranges");
const grammar_formatter_1 = require("./lsp/grammar-formatter");
const grammar_semantic_tokens_1 = require("./lsp/grammar-semantic-tokens");
const grammar_naming_1 = require("./references/grammar-naming");
const grammar_references_1 = require("./references/grammar-references");
const grammar_definition_1 = require("./lsp/grammar-definition");
const grammar_call_hierarchy_1 = require("./lsp/grammar-call-hierarchy");
const validation_resources_collector_1 = require("./validation/validation-resources-collector");
const types_validator_1 = require("./validation/types-validator");
const promise_util_1 = require("../utils/promise-util");
const documents_1 = require("../workspace/documents");
const grammar_completion_provider_1 = require("./lsp/grammar-completion-provider");
exports.LangiumGrammarModule = {
    validation: {
        LangiumGrammarValidator: (services) => new validator_1.LangiumGrammarValidator(services),
        ValidationResourcesCollector: (services) => new validation_resources_collector_1.LangiumGrammarValidationResourcesCollector(services),
        LangiumGrammarTypesValidator: () => new types_validator_1.LangiumGrammarTypesValidator(),
    },
    lsp: {
        FoldingRangeProvider: (services) => new grammar_folding_ranges_1.LangiumGrammarFoldingRangeProvider(services),
        CodeActionProvider: (services) => new grammar_code_actions_1.LangiumGrammarCodeActionProvider(services),
        SemanticTokenProvider: (services) => new grammar_semantic_tokens_1.LangiumGrammarSemanticTokenProvider(services),
        Formatter: () => new grammar_formatter_1.LangiumGrammarFormatter(),
        DefinitionProvider: (services) => new grammar_definition_1.LangiumGrammarDefinitionProvider(services),
        CallHierarchyProvider: (services) => new grammar_call_hierarchy_1.LangiumGrammarCallHierarchyProvider(services),
        CompletionProvider: (services) => new grammar_completion_provider_1.LangiumGrammarCompletionProvider(services)
    },
    references: {
        ScopeComputation: (services) => new grammar_scope_1.LangiumGrammarScopeComputation(services),
        ScopeProvider: (services) => new grammar_scope_1.LangiumGrammarScopeProvider(services),
        References: (services) => new grammar_references_1.LangiumGrammarReferences(services),
        NameProvider: () => new grammar_naming_1.LangiumGrammarNameProvider()
    }
};
function createLangiumGrammarServices(context, sharedModule) {
    const shared = (0, dependency_injection_1.inject)((0, default_module_1.createDefaultSharedModule)(context), module_1.LangiumGrammarGeneratedSharedModule, sharedModule);
    const grammar = (0, dependency_injection_1.inject)((0, default_module_1.createDefaultModule)({ shared }), module_1.LangiumGrammarGeneratedModule, exports.LangiumGrammarModule);
    addTypeCollectionPhase(shared, grammar);
    shared.ServiceRegistry.register(grammar);
    (0, validator_1.registerValidationChecks)(grammar);
    (0, types_validator_1.registerTypeValidationChecks)(grammar);
    return { shared, grammar };
}
exports.createLangiumGrammarServices = createLangiumGrammarServices;
function addTypeCollectionPhase(sharedServices, grammarServices) {
    const documentBuilder = sharedServices.workspace.DocumentBuilder;
    documentBuilder.onBuildPhase(documents_1.DocumentState.IndexedReferences, async (documents, cancelToken) => {
        for (const document of documents) {
            await (0, promise_util_1.interruptAndCheck)(cancelToken);
            const typeCollector = grammarServices.validation.ValidationResourcesCollector;
            const grammar = document.parseResult.value;
            document.validationResources = typeCollector.collectValidationResources(grammar);
        }
    });
}
//# sourceMappingURL=langium-grammar-module.js.map