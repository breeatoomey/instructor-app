"use strict";
/******************************************************************************
 * Copyright 2022 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeFileSystem = exports.NodeFileSystemProvider = void 0;
const fs_1 = __importDefault(require("fs"));
const vscode_uri_1 = require("vscode-uri");
class NodeFileSystemProvider {
    constructor() {
        this.encoding = 'utf-8';
    }
    readFile(uri) {
        return fs_1.default.promises.readFile(uri.fsPath, this.encoding);
    }
    readFileSync(uri) {
        return fs_1.default.readFileSync(uri.fsPath, this.encoding);
    }
    async readDirectory(folderPath) {
        const dirents = await fs_1.default.promises.readdir(folderPath.fsPath, { withFileTypes: true });
        return dirents.map(dirent => ({
            dirent,
            isFile: dirent.isFile(),
            isDirectory: dirent.isDirectory(),
            uri: vscode_uri_1.Utils.joinPath(folderPath, dirent.name)
        }));
    }
}
exports.NodeFileSystemProvider = NodeFileSystemProvider;
exports.NodeFileSystem = {
    fileSystemProvider: () => new NodeFileSystemProvider()
};
//# sourceMappingURL=node-file-system-provider.js.map