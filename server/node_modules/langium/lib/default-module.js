"use strict";
/******************************************************************************
 * Copyright 2021 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultSharedModule = exports.createDefaultModule = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const grammar_config_1 = require("./grammar/grammar-config");
const completion_parser_builder_1 = require("./parser/completion-parser-builder");
const completion_provider_1 = require("./lsp/completion/completion-provider");
const document_highlight_provider_1 = require("./lsp/document-highlight-provider");
const document_symbol_provider_1 = require("./lsp/document-symbol-provider");
const folding_range_provider_1 = require("./lsp/folding-range-provider");
const fuzzy_matcher_1 = require("./lsp/fuzzy-matcher");
const definition_provider_1 = require("./lsp/definition-provider");
const hover_provider_1 = require("./lsp/hover-provider");
const language_server_1 = require("./lsp/language-server");
const node_kind_provider_1 = require("./lsp/node-kind-provider");
const references_provider_1 = require("./lsp/references-provider");
const rename_provider_1 = require("./lsp/rename-provider");
const workspace_symbol_provider_1 = require("./lsp/workspace-symbol-provider");
const langium_parser_builder_1 = require("./parser/langium-parser-builder");
const token_builder_1 = require("./parser/token-builder");
const value_converter_1 = require("./parser/value-converter");
const linker_1 = require("./references/linker");
const name_provider_1 = require("./references/name-provider");
const references_1 = require("./references/references");
const scope_computation_1 = require("./references/scope-computation");
const scope_provider_1 = require("./references/scope-provider");
const json_serializer_1 = require("./serializer/json-serializer");
const service_registry_1 = require("./service-registry");
const promise_util_1 = require("./utils/promise-util");
const document_validator_1 = require("./validation/document-validator");
const validation_registry_1 = require("./validation/validation-registry");
const ast_descriptions_1 = require("./workspace/ast-descriptions");
const ast_node_locator_1 = require("./workspace/ast-node-locator");
const configuration_1 = require("./workspace/configuration");
const document_builder_1 = require("./workspace/document-builder");
const documents_1 = require("./workspace/documents");
const index_manager_1 = require("./workspace/index-manager");
const workspace_manager_1 = require("./workspace/workspace-manager");
const lexer_1 = require("./parser/lexer");
const documentation_1 = require("./documentation");
const comment_provider_1 = require("./documentation/comment-provider");
const langium_parser_1 = require("./parser/langium-parser");
/**
 * Create a dependency injection module for the default language-specific services. This is a
 * set of services that are used by exactly one language.
 */
function createDefaultModule(context) {
    return {
        documentation: {
            CommentProvider: (services) => new comment_provider_1.DefaultCommentProvider(services),
            DocumentationProvider: (services) => new documentation_1.JSDocDocumentationProvider(services)
        },
        parser: {
            GrammarConfig: (services) => (0, grammar_config_1.createGrammarConfig)(services),
            LangiumParser: (services) => (0, langium_parser_builder_1.createLangiumParser)(services),
            CompletionParser: (services) => (0, completion_parser_builder_1.createCompletionParser)(services),
            ValueConverter: () => new value_converter_1.DefaultValueConverter(),
            TokenBuilder: () => new token_builder_1.DefaultTokenBuilder(),
            Lexer: (services) => new lexer_1.DefaultLexer(services),
            ParserErrorMessageProvider: () => new langium_parser_1.LangiumParserErrorMessageProvider()
        },
        lsp: {
            CompletionProvider: (services) => new completion_provider_1.DefaultCompletionProvider(services),
            DocumentSymbolProvider: (services) => new document_symbol_provider_1.DefaultDocumentSymbolProvider(services),
            HoverProvider: (services) => new hover_provider_1.MultilineCommentHoverProvider(services),
            FoldingRangeProvider: (services) => new folding_range_provider_1.DefaultFoldingRangeProvider(services),
            ReferencesProvider: (services) => new references_provider_1.DefaultReferencesProvider(services),
            DefinitionProvider: (services) => new definition_provider_1.DefaultDefinitionProvider(services),
            DocumentHighlightProvider: (services) => new document_highlight_provider_1.DefaultDocumentHighlightProvider(services),
            RenameProvider: (services) => new rename_provider_1.DefaultRenameProvider(services)
        },
        workspace: {
            AstNodeLocator: () => new ast_node_locator_1.DefaultAstNodeLocator(),
            AstNodeDescriptionProvider: (services) => new ast_descriptions_1.DefaultAstNodeDescriptionProvider(services),
            ReferenceDescriptionProvider: (services) => new ast_descriptions_1.DefaultReferenceDescriptionProvider(services)
        },
        references: {
            Linker: (services) => new linker_1.DefaultLinker(services),
            NameProvider: () => new name_provider_1.DefaultNameProvider(),
            ScopeProvider: (services) => new scope_provider_1.DefaultScopeProvider(services),
            ScopeComputation: (services) => new scope_computation_1.DefaultScopeComputation(services),
            References: (services) => new references_1.DefaultReferences(services)
        },
        serializer: {
            JsonSerializer: (services) => new json_serializer_1.DefaultJsonSerializer(services)
        },
        validation: {
            DocumentValidator: (services) => new document_validator_1.DefaultDocumentValidator(services),
            ValidationRegistry: (services) => new validation_registry_1.ValidationRegistry(services)
        },
        shared: () => context.shared
    };
}
exports.createDefaultModule = createDefaultModule;
/**
 * Create a dependency injection module for the default shared services. This is the set of
 * services that are shared between multiple languages.
 */
function createDefaultSharedModule(context) {
    return {
        ServiceRegistry: () => new service_registry_1.DefaultServiceRegistry(),
        lsp: {
            Connection: () => context.connection,
            LanguageServer: (services) => new language_server_1.DefaultLanguageServer(services),
            WorkspaceSymbolProvider: (services) => new workspace_symbol_provider_1.DefaultWorkspaceSymbolProvider(services),
            NodeKindProvider: () => new node_kind_provider_1.DefaultNodeKindProvider(),
            FuzzyMatcher: () => new fuzzy_matcher_1.DefaultFuzzyMatcher()
        },
        workspace: {
            LangiumDocuments: (services) => new documents_1.DefaultLangiumDocuments(services),
            LangiumDocumentFactory: (services) => new documents_1.DefaultLangiumDocumentFactory(services),
            DocumentBuilder: (services) => new document_builder_1.DefaultDocumentBuilder(services),
            TextDocuments: () => new vscode_languageserver_1.TextDocuments(vscode_languageserver_textdocument_1.TextDocument),
            IndexManager: (services) => new index_manager_1.DefaultIndexManager(services),
            WorkspaceManager: (services) => new workspace_manager_1.DefaultWorkspaceManager(services),
            FileSystemProvider: (services) => context.fileSystemProvider(services),
            MutexLock: () => new promise_util_1.MutexLock(),
            ConfigurationProvider: (services) => new configuration_1.DefaultConfigurationProvider(services)
        }
    };
}
exports.createDefaultSharedModule = createDefaultSharedModule;
//# sourceMappingURL=default-module.js.map