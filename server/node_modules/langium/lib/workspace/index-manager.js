"use strict";
/******************************************************************************
 * Copyright 2021 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultIndexManager = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
const ast_util_1 = require("../utils/ast-util");
const stream_1 = require("../utils/stream");
const uri_util_1 = require("../utils/uri-util");
const documents_1 = require("./documents");
const caching_1 = require("../utils/caching");
class DefaultIndexManager {
    constructor(services) {
        /**
         * The `simpleIndex` stores all `AstNodeDescription` items exported by a document.
         * The key used in this map is the string representation of the specific document URI.
         */
        this.simpleIndex = new Map();
        /**
         * This is a cache for the `allElements()` method.
         * It caches the descriptions from `simpleIndex` grouped by types.
         */
        this.simpleTypeIndex = new caching_1.ContextCache();
        /**
         * This index keeps track of all `ReferenceDescription` items exported by a document.
         * This is used to compute which elements are affected by a document change
         * and for finding references to an AST node.
         */
        this.referenceIndex = new Map();
        this.documents = services.workspace.LangiumDocuments;
        this.serviceRegistry = services.ServiceRegistry;
        this.astReflection = services.AstReflection;
    }
    findAllReferences(targetNode, astNodePath) {
        const targetDocUri = (0, ast_util_1.getDocument)(targetNode).uri;
        const result = [];
        this.referenceIndex.forEach(docRefs => {
            docRefs.forEach(refDescr => {
                if ((0, uri_util_1.equalURI)(refDescr.targetUri, targetDocUri) && refDescr.targetPath === astNodePath) {
                    result.push(refDescr);
                }
            });
        });
        return (0, stream_1.stream)(result);
    }
    allElements(nodeType, uris) {
        let documentUris = (0, stream_1.stream)(this.simpleIndex.keys());
        if (uris) {
            documentUris = documentUris.filter(uri => !uris || uris.has(uri));
        }
        return documentUris
            .map(uri => this.getFileDescriptions(uri, nodeType))
            .flat();
    }
    getFileDescriptions(uri, nodeType) {
        var _a;
        if (!nodeType) {
            return (_a = this.simpleIndex.get(uri)) !== null && _a !== void 0 ? _a : [];
        }
        const descriptions = this.simpleTypeIndex.get(uri, nodeType, () => {
            var _a;
            const allFileDescriptions = (_a = this.simpleIndex.get(uri)) !== null && _a !== void 0 ? _a : [];
            return allFileDescriptions.filter(e => this.astReflection.isSubtype(e.type, nodeType));
        });
        return descriptions;
    }
    remove(uris) {
        for (const uri of uris) {
            const uriString = uri.toString();
            this.simpleIndex.delete(uriString);
            this.simpleTypeIndex.clear(uriString);
            this.referenceIndex.delete(uriString);
        }
    }
    async updateContent(document, cancelToken = vscode_languageserver_1.CancellationToken.None) {
        const services = this.serviceRegistry.getServices(document.uri);
        const exports = await services.references.ScopeComputation.computeExports(document, cancelToken);
        for (const data of exports) {
            data.node = undefined; // clear reference to the AST Node
        }
        const uri = document.uri.toString();
        this.simpleIndex.set(uri, exports);
        this.simpleTypeIndex.clear(uri);
        document.state = documents_1.DocumentState.IndexedContent;
    }
    async updateReferences(document, cancelToken = vscode_languageserver_1.CancellationToken.None) {
        const services = this.serviceRegistry.getServices(document.uri);
        const indexData = await services.workspace.ReferenceDescriptionProvider.createDescriptions(document, cancelToken);
        this.referenceIndex.set(document.uri.toString(), indexData);
        document.state = documents_1.DocumentState.IndexedReferences;
    }
    getAffectedDocuments(uris) {
        return this.documents.all.filter(e => {
            if (uris.some(uri => (0, uri_util_1.equalURI)(e.uri, uri))) {
                return false;
            }
            for (const uri of uris) {
                if (this.isAffected(e, uri)) {
                    return true;
                }
            }
            return false;
        });
    }
    /**
     * Determine whether the given document could be affected by a change of the document
     * identified by the given URI (second parameter).
     */
    isAffected(document, changed) {
        // Cache the uri string
        const changedUriString = changed.toString();
        const documentUri = document.uri.toString();
        // The document is affected if it contains linking errors
        if (document.references.some(e => e.error !== undefined)) {
            return true;
        }
        const references = this.referenceIndex.get(documentUri);
        // ...or if it contains a reference to the changed file
        if (references) {
            return references.filter(e => !e.local).some(e => (0, uri_util_1.equalURI)(e.targetUri, changedUriString));
        }
        return false;
    }
}
exports.DefaultIndexManager = DefaultIndexManager;
//# sourceMappingURL=index-manager.js.map